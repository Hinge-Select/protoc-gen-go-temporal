syntax = "proto3";

package example.mutex.v1;

import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "temporal/v1/temporal.proto";

service Example {
  option (temporal.v1.service) = {task_queue: "mutex"};

  // AcquireLock requests a lock on a resource identified by `resource_id`
  // and blocks until the lock is acquired, returning a `lease_id` that
  // can be used to release the lock.
  rpc AcquireLock(AcquireLockInput) returns (AcquireLockOutput) {
    option (temporal.v1.update) = {name: "mutex.v1.AcquireLock"};
  }

  // Mutex is a workflow that manages concurrent access to a resource
  // identified by `resource_id`.
  rpc Mutex(MutexInput) returns (google.protobuf.Empty) {
    option (temporal.v1.workflow) = {
      name: "mutex.v1.Mutex"
      id: 'mutex:${! resourceId }'
      retry_policy: {
        initial_interval: {seconds: 1}
        backoff_coefficient: 2.0
        max_interval: {seconds: 60}
        max_attempts: 5
      }
      update: {
        ref: 'AcquireLock'
        start: true
        workflow_id_conflict_policy: WORKFLOW_ID_CONFLICT_POLICY_USE_EXISTING
      }
      signal: {ref: 'ReleaseLock'}
    };
    option (temporal.v1.activity) = {
      start_to_close_timeout: {seconds: 10}
    };
  }

  // ReleaseLock releases a lock on a resource identified by `lease_id`.
  rpc ReleaseLock(ReleaseLockInput) returns (google.protobuf.Empty) {
    option (temporal.v1.signal) = {name: "mutex.v1.ReleaseLock"};
  }

  // SampleWorkflowWithMutex is a sample workflow that demonstrates how to
  // use the Mutex service.
  rpc SampleWorkflowWithMutex(SampleWorkflowWithMutexInput) returns (google.protobuf.Empty) {
    option (temporal.v1.workflow) = {id: 'SampleWorkflow1WithMutex_${! uuid_v4() }'};
  }
}

message MutexInput {
  string resource_id = 1;
}

message AcquireLockInput {
  google.protobuf.Duration timeout = 1;
}

message AcquireLockOutput {
  string lease_id = 1;
}

message ReleaseLockInput {
  string lease_id = 1;
}

message SampleWorkflowWithMutexInput {
  string resource_id = 1;
  google.protobuf.Duration sleep = 2;
}
