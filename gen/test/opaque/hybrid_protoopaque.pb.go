// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: test/opaque/hybrid.proto

//go:build protoopaque

package opaque

import (
	_ "github.com/cludden/protoc-gen-go-temporal/gen/temporal/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HybridExample struct {
	state                        protoimpl.MessageState     `protogen:"opaque.v1"`
	xxx_hidden_Name              string                     `protobuf:"bytes,1,opt,name=name"`
	xxx_hidden_Score             float64                    `protobuf:"fixed64,2,opt,name=score"`
	xxx_hidden_Scores            []float64                  `protobuf:"fixed64,3,rep,packed,name=scores"`
	xxx_hidden_Ratio             float32                    `protobuf:"fixed32,4,opt,name=ratio"`
	xxx_hidden_Ratios            []float32                  `protobuf:"fixed32,5,rep,packed,name=ratios"`
	xxx_hidden_Age               int32                      `protobuf:"varint,6,opt,name=age"`
	xxx_hidden_Ages              []int32                    `protobuf:"varint,7,rep,packed,name=ages"`
	xxx_hidden_Id                int64                      `protobuf:"varint,8,opt,name=id"`
	xxx_hidden_Ids               []int64                    `protobuf:"varint,9,rep,packed,name=ids"`
	xxx_hidden_Emails            []string                   `protobuf:"bytes,10,rep,name=emails"`
	xxx_hidden_Extra             map[string]string          `protobuf:"bytes,11,rep,name=extra" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	xxx_hidden_Status            Status                     `protobuf:"varint,12,opt,name=status,enum=test.opaque.Status"`
	xxx_hidden_Statuses          []Status                   `protobuf:"varint,13,rep,packed,name=statuses,enum=test.opaque.Status"`
	xxx_hidden_Size              uint32                     `protobuf:"varint,14,opt,name=size"`
	xxx_hidden_Sizes             []uint32                   `protobuf:"varint,15,rep,packed,name=sizes"`
	xxx_hidden_Length            uint64                     `protobuf:"varint,16,opt,name=length"`
	xxx_hidden_Lengths           []uint64                   `protobuf:"varint,17,rep,packed,name=lengths"`
	xxx_hidden_ConnectionId      int32                      `protobuf:"zigzag32,18,opt,name=connection_id,json=connectionId"`
	xxx_hidden_ConnectionIds     []int32                    `protobuf:"zigzag32,19,rep,packed,name=connection_ids,json=connectionIds"`
	xxx_hidden_SessionId         int64                      `protobuf:"zigzag64,20,opt,name=session_id,json=sessionId"`
	xxx_hidden_SessionIds        []int64                    `protobuf:"zigzag64,21,rep,packed,name=session_ids,json=sessionIds"`
	xxx_hidden_FixedSize         uint32                     `protobuf:"fixed32,22,opt,name=fixed_size,json=fixedSize"`
	xxx_hidden_FixedSizes        []uint32                   `protobuf:"fixed32,23,rep,packed,name=fixed_sizes,json=fixedSizes"`
	xxx_hidden_FixedLength       uint64                     `protobuf:"fixed64,24,opt,name=fixed_length,json=fixedLength"`
	xxx_hidden_FixedLengths      []uint64                   `protobuf:"fixed64,25,rep,packed,name=fixed_lengths,json=fixedLengths"`
	xxx_hidden_SfixedSize        int32                      `protobuf:"fixed32,26,opt,name=sfixed_size,json=sfixedSize"`
	xxx_hidden_SfixedSizes       []int32                    `protobuf:"fixed32,27,rep,packed,name=sfixed_sizes,json=sfixedSizes"`
	xxx_hidden_SfixedLength      int64                      `protobuf:"fixed64,28,opt,name=sfixed_length,json=sfixedLength"`
	xxx_hidden_SfixedLengths     []int64                    `protobuf:"fixed64,29,rep,packed,name=sfixed_lengths,json=sfixedLengths"`
	xxx_hidden_IsActive          bool                       `protobuf:"varint,30,opt,name=is_active,json=isActive"`
	xxx_hidden_IsActives         []bool                     `protobuf:"varint,31,rep,packed,name=is_actives,json=isActives"`
	xxx_hidden_Data              []byte                     `protobuf:"bytes,32,opt,name=data"`
	xxx_hidden_Datas             [][]byte                   `protobuf:"bytes,33,rep,name=datas"`
	xxx_hidden_Address           *Address                   `protobuf:"bytes,34,opt,name=address"`
	xxx_hidden_PreviousAddresses *[]*Address                `protobuf:"bytes,35,rep,name=previous_addresses,json=previousAddresses"`
	xxx_hidden_OneofField        isHybridExample_OneofField `protobuf_oneof:"oneof_field"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *HybridExample) Reset() {
	*x = HybridExample{}
	mi := &file_test_opaque_hybrid_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HybridExample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridExample) ProtoMessage() {}

func (x *HybridExample) ProtoReflect() protoreflect.Message {
	mi := &file_test_opaque_hybrid_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *HybridExample) GetName() string {
	if x != nil {
		return x.xxx_hidden_Name
	}
	return ""
}

func (x *HybridExample) GetScore() float64 {
	if x != nil {
		return x.xxx_hidden_Score
	}
	return 0
}

func (x *HybridExample) GetScores() []float64 {
	if x != nil {
		return x.xxx_hidden_Scores
	}
	return nil
}

func (x *HybridExample) GetRatio() float32 {
	if x != nil {
		return x.xxx_hidden_Ratio
	}
	return 0
}

func (x *HybridExample) GetRatios() []float32 {
	if x != nil {
		return x.xxx_hidden_Ratios
	}
	return nil
}

func (x *HybridExample) GetAge() int32 {
	if x != nil {
		return x.xxx_hidden_Age
	}
	return 0
}

func (x *HybridExample) GetAges() []int32 {
	if x != nil {
		return x.xxx_hidden_Ages
	}
	return nil
}

func (x *HybridExample) GetId() int64 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *HybridExample) GetIds() []int64 {
	if x != nil {
		return x.xxx_hidden_Ids
	}
	return nil
}

func (x *HybridExample) GetEmails() []string {
	if x != nil {
		return x.xxx_hidden_Emails
	}
	return nil
}

func (x *HybridExample) GetExtra() map[string]string {
	if x != nil {
		return x.xxx_hidden_Extra
	}
	return nil
}

func (x *HybridExample) GetStatus() Status {
	if x != nil {
		return x.xxx_hidden_Status
	}
	return Status_STATUS_UNSPECIFIED
}

func (x *HybridExample) GetStatuses() []Status {
	if x != nil {
		return x.xxx_hidden_Statuses
	}
	return nil
}

func (x *HybridExample) GetSize() uint32 {
	if x != nil {
		return x.xxx_hidden_Size
	}
	return 0
}

func (x *HybridExample) GetSizes() []uint32 {
	if x != nil {
		return x.xxx_hidden_Sizes
	}
	return nil
}

func (x *HybridExample) GetLength() uint64 {
	if x != nil {
		return x.xxx_hidden_Length
	}
	return 0
}

func (x *HybridExample) GetLengths() []uint64 {
	if x != nil {
		return x.xxx_hidden_Lengths
	}
	return nil
}

func (x *HybridExample) GetConnectionId() int32 {
	if x != nil {
		return x.xxx_hidden_ConnectionId
	}
	return 0
}

func (x *HybridExample) GetConnectionIds() []int32 {
	if x != nil {
		return x.xxx_hidden_ConnectionIds
	}
	return nil
}

func (x *HybridExample) GetSessionId() int64 {
	if x != nil {
		return x.xxx_hidden_SessionId
	}
	return 0
}

func (x *HybridExample) GetSessionIds() []int64 {
	if x != nil {
		return x.xxx_hidden_SessionIds
	}
	return nil
}

func (x *HybridExample) GetFixedSize() uint32 {
	if x != nil {
		return x.xxx_hidden_FixedSize
	}
	return 0
}

func (x *HybridExample) GetFixedSizes() []uint32 {
	if x != nil {
		return x.xxx_hidden_FixedSizes
	}
	return nil
}

func (x *HybridExample) GetFixedLength() uint64 {
	if x != nil {
		return x.xxx_hidden_FixedLength
	}
	return 0
}

func (x *HybridExample) GetFixedLengths() []uint64 {
	if x != nil {
		return x.xxx_hidden_FixedLengths
	}
	return nil
}

func (x *HybridExample) GetSfixedSize() int32 {
	if x != nil {
		return x.xxx_hidden_SfixedSize
	}
	return 0
}

func (x *HybridExample) GetSfixedSizes() []int32 {
	if x != nil {
		return x.xxx_hidden_SfixedSizes
	}
	return nil
}

func (x *HybridExample) GetSfixedLength() int64 {
	if x != nil {
		return x.xxx_hidden_SfixedLength
	}
	return 0
}

func (x *HybridExample) GetSfixedLengths() []int64 {
	if x != nil {
		return x.xxx_hidden_SfixedLengths
	}
	return nil
}

func (x *HybridExample) GetIsActive() bool {
	if x != nil {
		return x.xxx_hidden_IsActive
	}
	return false
}

func (x *HybridExample) GetIsActives() []bool {
	if x != nil {
		return x.xxx_hidden_IsActives
	}
	return nil
}

func (x *HybridExample) GetData() []byte {
	if x != nil {
		return x.xxx_hidden_Data
	}
	return nil
}

func (x *HybridExample) GetDatas() [][]byte {
	if x != nil {
		return x.xxx_hidden_Datas
	}
	return nil
}

func (x *HybridExample) GetAddress() *Address {
	if x != nil {
		return x.xxx_hidden_Address
	}
	return nil
}

func (x *HybridExample) GetPreviousAddresses() []*Address {
	if x != nil {
		if x.xxx_hidden_PreviousAddresses != nil {
			return *x.xxx_hidden_PreviousAddresses
		}
	}
	return nil
}

func (x *HybridExample) GetOneofName() string {
	if x != nil {
		if x, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofName); ok {
			return x.OneofName
		}
	}
	return ""
}

func (x *HybridExample) GetOneofScore() float64 {
	if x != nil {
		if x, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofScore); ok {
			return x.OneofScore
		}
	}
	return 0
}

func (x *HybridExample) GetOneofRatio() float32 {
	if x != nil {
		if x, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofRatio); ok {
			return x.OneofRatio
		}
	}
	return 0
}

func (x *HybridExample) GetOneofAge() int32 {
	if x != nil {
		if x, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofAge); ok {
			return x.OneofAge
		}
	}
	return 0
}

func (x *HybridExample) GetOneofId() int64 {
	if x != nil {
		if x, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofId); ok {
			return x.OneofId
		}
	}
	return 0
}

func (x *HybridExample) GetOneofStatus() Status {
	if x != nil {
		if x, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofStatus); ok {
			return x.OneofStatus
		}
	}
	return Status_STATUS_UNSPECIFIED
}

func (x *HybridExample) GetOneofSize() uint32 {
	if x != nil {
		if x, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofSize); ok {
			return x.OneofSize
		}
	}
	return 0
}

func (x *HybridExample) GetOneofLength() uint64 {
	if x != nil {
		if x, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofLength); ok {
			return x.OneofLength
		}
	}
	return 0
}

func (x *HybridExample) GetOneofConnectionId() int32 {
	if x != nil {
		if x, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofConnectionId); ok {
			return x.OneofConnectionId
		}
	}
	return 0
}

func (x *HybridExample) GetOneofSessionId() int64 {
	if x != nil {
		if x, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofSessionId); ok {
			return x.OneofSessionId
		}
	}
	return 0
}

func (x *HybridExample) GetOneofFixedSize() uint32 {
	if x != nil {
		if x, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofFixedSize); ok {
			return x.OneofFixedSize
		}
	}
	return 0
}

func (x *HybridExample) GetOneofFixedLength() uint64 {
	if x != nil {
		if x, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofFixedLength); ok {
			return x.OneofFixedLength
		}
	}
	return 0
}

func (x *HybridExample) GetOneofSfixedSize() int32 {
	if x != nil {
		if x, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofSfixedSize); ok {
			return x.OneofSfixedSize
		}
	}
	return 0
}

func (x *HybridExample) GetOneofSfixedLength() int64 {
	if x != nil {
		if x, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofSfixedLength); ok {
			return x.OneofSfixedLength
		}
	}
	return 0
}

func (x *HybridExample) GetOneofIsActive() bool {
	if x != nil {
		if x, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofIsActive); ok {
			return x.OneofIsActive
		}
	}
	return false
}

func (x *HybridExample) GetOneofData() []byte {
	if x != nil {
		if x, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofData); ok {
			return x.OneofData
		}
	}
	return nil
}

func (x *HybridExample) GetOneofAddress() *Address {
	if x != nil {
		if x, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofAddress); ok {
			return x.OneofAddress
		}
	}
	return nil
}

func (x *HybridExample) SetName(v string) {
	x.xxx_hidden_Name = v
}

func (x *HybridExample) SetScore(v float64) {
	x.xxx_hidden_Score = v
}

func (x *HybridExample) SetScores(v []float64) {
	x.xxx_hidden_Scores = v
}

func (x *HybridExample) SetRatio(v float32) {
	x.xxx_hidden_Ratio = v
}

func (x *HybridExample) SetRatios(v []float32) {
	x.xxx_hidden_Ratios = v
}

func (x *HybridExample) SetAge(v int32) {
	x.xxx_hidden_Age = v
}

func (x *HybridExample) SetAges(v []int32) {
	x.xxx_hidden_Ages = v
}

func (x *HybridExample) SetId(v int64) {
	x.xxx_hidden_Id = v
}

func (x *HybridExample) SetIds(v []int64) {
	x.xxx_hidden_Ids = v
}

func (x *HybridExample) SetEmails(v []string) {
	x.xxx_hidden_Emails = v
}

func (x *HybridExample) SetExtra(v map[string]string) {
	x.xxx_hidden_Extra = v
}

func (x *HybridExample) SetStatus(v Status) {
	x.xxx_hidden_Status = v
}

func (x *HybridExample) SetStatuses(v []Status) {
	x.xxx_hidden_Statuses = v
}

func (x *HybridExample) SetSize(v uint32) {
	x.xxx_hidden_Size = v
}

func (x *HybridExample) SetSizes(v []uint32) {
	x.xxx_hidden_Sizes = v
}

func (x *HybridExample) SetLength(v uint64) {
	x.xxx_hidden_Length = v
}

func (x *HybridExample) SetLengths(v []uint64) {
	x.xxx_hidden_Lengths = v
}

func (x *HybridExample) SetConnectionId(v int32) {
	x.xxx_hidden_ConnectionId = v
}

func (x *HybridExample) SetConnectionIds(v []int32) {
	x.xxx_hidden_ConnectionIds = v
}

func (x *HybridExample) SetSessionId(v int64) {
	x.xxx_hidden_SessionId = v
}

func (x *HybridExample) SetSessionIds(v []int64) {
	x.xxx_hidden_SessionIds = v
}

func (x *HybridExample) SetFixedSize(v uint32) {
	x.xxx_hidden_FixedSize = v
}

func (x *HybridExample) SetFixedSizes(v []uint32) {
	x.xxx_hidden_FixedSizes = v
}

func (x *HybridExample) SetFixedLength(v uint64) {
	x.xxx_hidden_FixedLength = v
}

func (x *HybridExample) SetFixedLengths(v []uint64) {
	x.xxx_hidden_FixedLengths = v
}

func (x *HybridExample) SetSfixedSize(v int32) {
	x.xxx_hidden_SfixedSize = v
}

func (x *HybridExample) SetSfixedSizes(v []int32) {
	x.xxx_hidden_SfixedSizes = v
}

func (x *HybridExample) SetSfixedLength(v int64) {
	x.xxx_hidden_SfixedLength = v
}

func (x *HybridExample) SetSfixedLengths(v []int64) {
	x.xxx_hidden_SfixedLengths = v
}

func (x *HybridExample) SetIsActive(v bool) {
	x.xxx_hidden_IsActive = v
}

func (x *HybridExample) SetIsActives(v []bool) {
	x.xxx_hidden_IsActives = v
}

func (x *HybridExample) SetData(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Data = v
}

func (x *HybridExample) SetDatas(v [][]byte) {
	x.xxx_hidden_Datas = v
}

func (x *HybridExample) SetAddress(v *Address) {
	x.xxx_hidden_Address = v
}

func (x *HybridExample) SetPreviousAddresses(v []*Address) {
	x.xxx_hidden_PreviousAddresses = &v
}

func (x *HybridExample) SetOneofName(v string) {
	x.xxx_hidden_OneofField = &hybridExample_OneofName{v}
}

func (x *HybridExample) SetOneofScore(v float64) {
	x.xxx_hidden_OneofField = &hybridExample_OneofScore{v}
}

func (x *HybridExample) SetOneofRatio(v float32) {
	x.xxx_hidden_OneofField = &hybridExample_OneofRatio{v}
}

func (x *HybridExample) SetOneofAge(v int32) {
	x.xxx_hidden_OneofField = &hybridExample_OneofAge{v}
}

func (x *HybridExample) SetOneofId(v int64) {
	x.xxx_hidden_OneofField = &hybridExample_OneofId{v}
}

func (x *HybridExample) SetOneofStatus(v Status) {
	x.xxx_hidden_OneofField = &hybridExample_OneofStatus{v}
}

func (x *HybridExample) SetOneofSize(v uint32) {
	x.xxx_hidden_OneofField = &hybridExample_OneofSize{v}
}

func (x *HybridExample) SetOneofLength(v uint64) {
	x.xxx_hidden_OneofField = &hybridExample_OneofLength{v}
}

func (x *HybridExample) SetOneofConnectionId(v int32) {
	x.xxx_hidden_OneofField = &hybridExample_OneofConnectionId{v}
}

func (x *HybridExample) SetOneofSessionId(v int64) {
	x.xxx_hidden_OneofField = &hybridExample_OneofSessionId{v}
}

func (x *HybridExample) SetOneofFixedSize(v uint32) {
	x.xxx_hidden_OneofField = &hybridExample_OneofFixedSize{v}
}

func (x *HybridExample) SetOneofFixedLength(v uint64) {
	x.xxx_hidden_OneofField = &hybridExample_OneofFixedLength{v}
}

func (x *HybridExample) SetOneofSfixedSize(v int32) {
	x.xxx_hidden_OneofField = &hybridExample_OneofSfixedSize{v}
}

func (x *HybridExample) SetOneofSfixedLength(v int64) {
	x.xxx_hidden_OneofField = &hybridExample_OneofSfixedLength{v}
}

func (x *HybridExample) SetOneofIsActive(v bool) {
	x.xxx_hidden_OneofField = &hybridExample_OneofIsActive{v}
}

func (x *HybridExample) SetOneofData(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_OneofField = &hybridExample_OneofData{v}
}

func (x *HybridExample) SetOneofAddress(v *Address) {
	if v == nil {
		x.xxx_hidden_OneofField = nil
		return
	}
	x.xxx_hidden_OneofField = &hybridExample_OneofAddress{v}
}

func (x *HybridExample) HasAddress() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Address != nil
}

func (x *HybridExample) HasOneofField() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_OneofField != nil
}

func (x *HybridExample) HasOneofName() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofName)
	return ok
}

func (x *HybridExample) HasOneofScore() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofScore)
	return ok
}

func (x *HybridExample) HasOneofRatio() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofRatio)
	return ok
}

func (x *HybridExample) HasOneofAge() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofAge)
	return ok
}

func (x *HybridExample) HasOneofId() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofId)
	return ok
}

func (x *HybridExample) HasOneofStatus() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofStatus)
	return ok
}

func (x *HybridExample) HasOneofSize() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofSize)
	return ok
}

func (x *HybridExample) HasOneofLength() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofLength)
	return ok
}

func (x *HybridExample) HasOneofConnectionId() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofConnectionId)
	return ok
}

func (x *HybridExample) HasOneofSessionId() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofSessionId)
	return ok
}

func (x *HybridExample) HasOneofFixedSize() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofFixedSize)
	return ok
}

func (x *HybridExample) HasOneofFixedLength() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofFixedLength)
	return ok
}

func (x *HybridExample) HasOneofSfixedSize() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofSfixedSize)
	return ok
}

func (x *HybridExample) HasOneofSfixedLength() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofSfixedLength)
	return ok
}

func (x *HybridExample) HasOneofIsActive() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofIsActive)
	return ok
}

func (x *HybridExample) HasOneofData() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofData)
	return ok
}

func (x *HybridExample) HasOneofAddress() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofAddress)
	return ok
}

func (x *HybridExample) ClearAddress() {
	x.xxx_hidden_Address = nil
}

func (x *HybridExample) ClearOneofField() {
	x.xxx_hidden_OneofField = nil
}

func (x *HybridExample) ClearOneofName() {
	if _, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofName); ok {
		x.xxx_hidden_OneofField = nil
	}
}

func (x *HybridExample) ClearOneofScore() {
	if _, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofScore); ok {
		x.xxx_hidden_OneofField = nil
	}
}

func (x *HybridExample) ClearOneofRatio() {
	if _, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofRatio); ok {
		x.xxx_hidden_OneofField = nil
	}
}

func (x *HybridExample) ClearOneofAge() {
	if _, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofAge); ok {
		x.xxx_hidden_OneofField = nil
	}
}

func (x *HybridExample) ClearOneofId() {
	if _, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofId); ok {
		x.xxx_hidden_OneofField = nil
	}
}

func (x *HybridExample) ClearOneofStatus() {
	if _, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofStatus); ok {
		x.xxx_hidden_OneofField = nil
	}
}

func (x *HybridExample) ClearOneofSize() {
	if _, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofSize); ok {
		x.xxx_hidden_OneofField = nil
	}
}

func (x *HybridExample) ClearOneofLength() {
	if _, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofLength); ok {
		x.xxx_hidden_OneofField = nil
	}
}

func (x *HybridExample) ClearOneofConnectionId() {
	if _, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofConnectionId); ok {
		x.xxx_hidden_OneofField = nil
	}
}

func (x *HybridExample) ClearOneofSessionId() {
	if _, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofSessionId); ok {
		x.xxx_hidden_OneofField = nil
	}
}

func (x *HybridExample) ClearOneofFixedSize() {
	if _, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofFixedSize); ok {
		x.xxx_hidden_OneofField = nil
	}
}

func (x *HybridExample) ClearOneofFixedLength() {
	if _, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofFixedLength); ok {
		x.xxx_hidden_OneofField = nil
	}
}

func (x *HybridExample) ClearOneofSfixedSize() {
	if _, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofSfixedSize); ok {
		x.xxx_hidden_OneofField = nil
	}
}

func (x *HybridExample) ClearOneofSfixedLength() {
	if _, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofSfixedLength); ok {
		x.xxx_hidden_OneofField = nil
	}
}

func (x *HybridExample) ClearOneofIsActive() {
	if _, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofIsActive); ok {
		x.xxx_hidden_OneofField = nil
	}
}

func (x *HybridExample) ClearOneofData() {
	if _, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofData); ok {
		x.xxx_hidden_OneofField = nil
	}
}

func (x *HybridExample) ClearOneofAddress() {
	if _, ok := x.xxx_hidden_OneofField.(*hybridExample_OneofAddress); ok {
		x.xxx_hidden_OneofField = nil
	}
}

const HybridExample_OneofField_not_set_case case_HybridExample_OneofField = 0
const HybridExample_OneofName_case case_HybridExample_OneofField = 36
const HybridExample_OneofScore_case case_HybridExample_OneofField = 37
const HybridExample_OneofRatio_case case_HybridExample_OneofField = 38
const HybridExample_OneofAge_case case_HybridExample_OneofField = 39
const HybridExample_OneofId_case case_HybridExample_OneofField = 40
const HybridExample_OneofStatus_case case_HybridExample_OneofField = 41
const HybridExample_OneofSize_case case_HybridExample_OneofField = 42
const HybridExample_OneofLength_case case_HybridExample_OneofField = 43
const HybridExample_OneofConnectionId_case case_HybridExample_OneofField = 44
const HybridExample_OneofSessionId_case case_HybridExample_OneofField = 45
const HybridExample_OneofFixedSize_case case_HybridExample_OneofField = 46
const HybridExample_OneofFixedLength_case case_HybridExample_OneofField = 47
const HybridExample_OneofSfixedSize_case case_HybridExample_OneofField = 48
const HybridExample_OneofSfixedLength_case case_HybridExample_OneofField = 49
const HybridExample_OneofIsActive_case case_HybridExample_OneofField = 50
const HybridExample_OneofData_case case_HybridExample_OneofField = 51
const HybridExample_OneofAddress_case case_HybridExample_OneofField = 52

func (x *HybridExample) WhichOneofField() case_HybridExample_OneofField {
	if x == nil {
		return HybridExample_OneofField_not_set_case
	}
	switch x.xxx_hidden_OneofField.(type) {
	case *hybridExample_OneofName:
		return HybridExample_OneofName_case
	case *hybridExample_OneofScore:
		return HybridExample_OneofScore_case
	case *hybridExample_OneofRatio:
		return HybridExample_OneofRatio_case
	case *hybridExample_OneofAge:
		return HybridExample_OneofAge_case
	case *hybridExample_OneofId:
		return HybridExample_OneofId_case
	case *hybridExample_OneofStatus:
		return HybridExample_OneofStatus_case
	case *hybridExample_OneofSize:
		return HybridExample_OneofSize_case
	case *hybridExample_OneofLength:
		return HybridExample_OneofLength_case
	case *hybridExample_OneofConnectionId:
		return HybridExample_OneofConnectionId_case
	case *hybridExample_OneofSessionId:
		return HybridExample_OneofSessionId_case
	case *hybridExample_OneofFixedSize:
		return HybridExample_OneofFixedSize_case
	case *hybridExample_OneofFixedLength:
		return HybridExample_OneofFixedLength_case
	case *hybridExample_OneofSfixedSize:
		return HybridExample_OneofSfixedSize_case
	case *hybridExample_OneofSfixedLength:
		return HybridExample_OneofSfixedLength_case
	case *hybridExample_OneofIsActive:
		return HybridExample_OneofIsActive_case
	case *hybridExample_OneofData:
		return HybridExample_OneofData_case
	case *hybridExample_OneofAddress:
		return HybridExample_OneofAddress_case
	default:
		return HybridExample_OneofField_not_set_case
	}
}

type HybridExample_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Name              string
	Score             float64
	Scores            []float64
	Ratio             float32
	Ratios            []float32
	Age               int32
	Ages              []int32
	Id                int64
	Ids               []int64
	Emails            []string
	Extra             map[string]string
	Status            Status
	Statuses          []Status
	Size              uint32
	Sizes             []uint32
	Length            uint64
	Lengths           []uint64
	ConnectionId      int32
	ConnectionIds     []int32
	SessionId         int64
	SessionIds        []int64
	FixedSize         uint32
	FixedSizes        []uint32
	FixedLength       uint64
	FixedLengths      []uint64
	SfixedSize        int32
	SfixedSizes       []int32
	SfixedLength      int64
	SfixedLengths     []int64
	IsActive          bool
	IsActives         []bool
	Data              []byte
	Datas             [][]byte
	Address           *Address
	PreviousAddresses []*Address
	// Fields of oneof xxx_hidden_OneofField:
	OneofName         *string
	OneofScore        *float64
	OneofRatio        *float32
	OneofAge          *int32
	OneofId           *int64
	OneofStatus       *Status
	OneofSize         *uint32
	OneofLength       *uint64
	OneofConnectionId *int32
	OneofSessionId    *int64
	OneofFixedSize    *uint32
	OneofFixedLength  *uint64
	OneofSfixedSize   *int32
	OneofSfixedLength *int64
	OneofIsActive     *bool
	OneofData         []byte
	OneofAddress      *Address
	// -- end of xxx_hidden_OneofField
}

func (b0 HybridExample_builder) Build() *HybridExample {
	m0 := &HybridExample{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Name = b.Name
	x.xxx_hidden_Score = b.Score
	x.xxx_hidden_Scores = b.Scores
	x.xxx_hidden_Ratio = b.Ratio
	x.xxx_hidden_Ratios = b.Ratios
	x.xxx_hidden_Age = b.Age
	x.xxx_hidden_Ages = b.Ages
	x.xxx_hidden_Id = b.Id
	x.xxx_hidden_Ids = b.Ids
	x.xxx_hidden_Emails = b.Emails
	x.xxx_hidden_Extra = b.Extra
	x.xxx_hidden_Status = b.Status
	x.xxx_hidden_Statuses = b.Statuses
	x.xxx_hidden_Size = b.Size
	x.xxx_hidden_Sizes = b.Sizes
	x.xxx_hidden_Length = b.Length
	x.xxx_hidden_Lengths = b.Lengths
	x.xxx_hidden_ConnectionId = b.ConnectionId
	x.xxx_hidden_ConnectionIds = b.ConnectionIds
	x.xxx_hidden_SessionId = b.SessionId
	x.xxx_hidden_SessionIds = b.SessionIds
	x.xxx_hidden_FixedSize = b.FixedSize
	x.xxx_hidden_FixedSizes = b.FixedSizes
	x.xxx_hidden_FixedLength = b.FixedLength
	x.xxx_hidden_FixedLengths = b.FixedLengths
	x.xxx_hidden_SfixedSize = b.SfixedSize
	x.xxx_hidden_SfixedSizes = b.SfixedSizes
	x.xxx_hidden_SfixedLength = b.SfixedLength
	x.xxx_hidden_SfixedLengths = b.SfixedLengths
	x.xxx_hidden_IsActive = b.IsActive
	x.xxx_hidden_IsActives = b.IsActives
	x.xxx_hidden_Data = b.Data
	x.xxx_hidden_Datas = b.Datas
	x.xxx_hidden_Address = b.Address
	x.xxx_hidden_PreviousAddresses = &b.PreviousAddresses
	if b.OneofName != nil {
		x.xxx_hidden_OneofField = &hybridExample_OneofName{*b.OneofName}
	}
	if b.OneofScore != nil {
		x.xxx_hidden_OneofField = &hybridExample_OneofScore{*b.OneofScore}
	}
	if b.OneofRatio != nil {
		x.xxx_hidden_OneofField = &hybridExample_OneofRatio{*b.OneofRatio}
	}
	if b.OneofAge != nil {
		x.xxx_hidden_OneofField = &hybridExample_OneofAge{*b.OneofAge}
	}
	if b.OneofId != nil {
		x.xxx_hidden_OneofField = &hybridExample_OneofId{*b.OneofId}
	}
	if b.OneofStatus != nil {
		x.xxx_hidden_OneofField = &hybridExample_OneofStatus{*b.OneofStatus}
	}
	if b.OneofSize != nil {
		x.xxx_hidden_OneofField = &hybridExample_OneofSize{*b.OneofSize}
	}
	if b.OneofLength != nil {
		x.xxx_hidden_OneofField = &hybridExample_OneofLength{*b.OneofLength}
	}
	if b.OneofConnectionId != nil {
		x.xxx_hidden_OneofField = &hybridExample_OneofConnectionId{*b.OneofConnectionId}
	}
	if b.OneofSessionId != nil {
		x.xxx_hidden_OneofField = &hybridExample_OneofSessionId{*b.OneofSessionId}
	}
	if b.OneofFixedSize != nil {
		x.xxx_hidden_OneofField = &hybridExample_OneofFixedSize{*b.OneofFixedSize}
	}
	if b.OneofFixedLength != nil {
		x.xxx_hidden_OneofField = &hybridExample_OneofFixedLength{*b.OneofFixedLength}
	}
	if b.OneofSfixedSize != nil {
		x.xxx_hidden_OneofField = &hybridExample_OneofSfixedSize{*b.OneofSfixedSize}
	}
	if b.OneofSfixedLength != nil {
		x.xxx_hidden_OneofField = &hybridExample_OneofSfixedLength{*b.OneofSfixedLength}
	}
	if b.OneofIsActive != nil {
		x.xxx_hidden_OneofField = &hybridExample_OneofIsActive{*b.OneofIsActive}
	}
	if b.OneofData != nil {
		x.xxx_hidden_OneofField = &hybridExample_OneofData{b.OneofData}
	}
	if b.OneofAddress != nil {
		x.xxx_hidden_OneofField = &hybridExample_OneofAddress{b.OneofAddress}
	}
	return m0
}

type case_HybridExample_OneofField protoreflect.FieldNumber

func (x case_HybridExample_OneofField) String() string {
	md := file_test_opaque_hybrid_proto_msgTypes[0].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isHybridExample_OneofField interface {
	isHybridExample_OneofField()
}

type hybridExample_OneofName struct {
	OneofName string `protobuf:"bytes,36,opt,name=oneof_name,json=oneofName,oneof"`
}

type hybridExample_OneofScore struct {
	OneofScore float64 `protobuf:"fixed64,37,opt,name=oneof_score,json=oneofScore,oneof"`
}

type hybridExample_OneofRatio struct {
	OneofRatio float32 `protobuf:"fixed32,38,opt,name=oneof_ratio,json=oneofRatio,oneof"`
}

type hybridExample_OneofAge struct {
	OneofAge int32 `protobuf:"varint,39,opt,name=oneof_age,json=oneofAge,oneof"`
}

type hybridExample_OneofId struct {
	OneofId int64 `protobuf:"varint,40,opt,name=oneof_id,json=oneofId,oneof"`
}

type hybridExample_OneofStatus struct {
	OneofStatus Status `protobuf:"varint,41,opt,name=oneof_status,json=oneofStatus,enum=test.opaque.Status,oneof"`
}

type hybridExample_OneofSize struct {
	OneofSize uint32 `protobuf:"varint,42,opt,name=oneof_size,json=oneofSize,oneof"`
}

type hybridExample_OneofLength struct {
	OneofLength uint64 `protobuf:"varint,43,opt,name=oneof_length,json=oneofLength,oneof"`
}

type hybridExample_OneofConnectionId struct {
	OneofConnectionId int32 `protobuf:"zigzag32,44,opt,name=oneof_connection_id,json=oneofConnectionId,oneof"`
}

type hybridExample_OneofSessionId struct {
	OneofSessionId int64 `protobuf:"zigzag64,45,opt,name=oneof_session_id,json=oneofSessionId,oneof"`
}

type hybridExample_OneofFixedSize struct {
	OneofFixedSize uint32 `protobuf:"fixed32,46,opt,name=oneof_fixed_size,json=oneofFixedSize,oneof"`
}

type hybridExample_OneofFixedLength struct {
	OneofFixedLength uint64 `protobuf:"fixed64,47,opt,name=oneof_fixed_length,json=oneofFixedLength,oneof"`
}

type hybridExample_OneofSfixedSize struct {
	OneofSfixedSize int32 `protobuf:"fixed32,48,opt,name=oneof_sfixed_size,json=oneofSfixedSize,oneof"`
}

type hybridExample_OneofSfixedLength struct {
	OneofSfixedLength int64 `protobuf:"fixed64,49,opt,name=oneof_sfixed_length,json=oneofSfixedLength,oneof"`
}

type hybridExample_OneofIsActive struct {
	OneofIsActive bool `protobuf:"varint,50,opt,name=oneof_is_active,json=oneofIsActive,oneof"`
}

type hybridExample_OneofData struct {
	OneofData []byte `protobuf:"bytes,51,opt,name=oneof_data,json=oneofData,oneof"`
}

type hybridExample_OneofAddress struct {
	OneofAddress *Address `protobuf:"bytes,52,opt,name=oneof_address,json=oneofAddress,oneof"`
}

func (*hybridExample_OneofName) isHybridExample_OneofField() {}

func (*hybridExample_OneofScore) isHybridExample_OneofField() {}

func (*hybridExample_OneofRatio) isHybridExample_OneofField() {}

func (*hybridExample_OneofAge) isHybridExample_OneofField() {}

func (*hybridExample_OneofId) isHybridExample_OneofField() {}

func (*hybridExample_OneofStatus) isHybridExample_OneofField() {}

func (*hybridExample_OneofSize) isHybridExample_OneofField() {}

func (*hybridExample_OneofLength) isHybridExample_OneofField() {}

func (*hybridExample_OneofConnectionId) isHybridExample_OneofField() {}

func (*hybridExample_OneofSessionId) isHybridExample_OneofField() {}

func (*hybridExample_OneofFixedSize) isHybridExample_OneofField() {}

func (*hybridExample_OneofFixedLength) isHybridExample_OneofField() {}

func (*hybridExample_OneofSfixedSize) isHybridExample_OneofField() {}

func (*hybridExample_OneofSfixedLength) isHybridExample_OneofField() {}

func (*hybridExample_OneofIsActive) isHybridExample_OneofField() {}

func (*hybridExample_OneofData) isHybridExample_OneofField() {}

func (*hybridExample_OneofAddress) isHybridExample_OneofField() {}

var File_test_opaque_hybrid_proto protoreflect.FileDescriptor

var file_test_opaque_hybrid_proto_rawDesc = string([]byte{
	0x0a, 0x18, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x2f, 0x68, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61,
	0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe3, 0x0e,
	0x0a, 0x0d, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x01, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x02, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x04, 0x61, 0x67, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x3b, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x2e, 0x48, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x2b, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x73,
	0x69, 0x7a, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x04, 0x52, 0x07, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x13, 0x20,
	0x03, 0x28, 0x11, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x12, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x15, 0x20, 0x03, 0x28, 0x12, 0x52, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x66, 0x69, 0x78, 0x65, 0x64, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73,
	0x18, 0x17, 0x20, 0x03, 0x28, 0x07, 0x52, 0x0a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x53, 0x69, 0x7a,
	0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x06, 0x52, 0x0c, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0f, 0x52,
	0x0a, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28,
	0x0f, 0x52, 0x0b, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x10, 0x52, 0x0c, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x10, 0x52, 0x0d, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x12, 0x2e, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x43, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x26, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00,
	0x52, 0x0a, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1d, 0x0a, 0x09,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x08, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x41, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x07, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x13, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x2c, 0x20, 0x01, 0x28, 0x11, 0x48, 0x00, 0x52, 0x11, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x12, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x07,
	0x48, 0x00, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x46, 0x69, 0x78, 0x65, 0x64, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x06, 0x48, 0x00,
	0x52, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x46, 0x69, 0x78, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x73, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0f, 0x48, 0x00, 0x52,
	0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x30, 0x0a, 0x13, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x31, 0x20, 0x01, 0x28, 0x10, 0x48, 0x00, 0x52,
	0x11, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x69, 0x73, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0d, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0a,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x09, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a,
	0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x32, 0xcb, 0x01, 0x0a, 0x06, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x12, 0x62,
	0x0a, 0x10, 0x50, 0x75, 0x74, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x12, 0x1a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65,
	0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x1a, 0x1a,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x2e, 0x48, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x22, 0x16, 0x8a, 0xc4, 0x03, 0x12,
	0x12, 0x10, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x10, 0x01, 0x12, 0x48, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x48, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x12, 0x1a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65,
	0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x04, 0xa2, 0xc4, 0x03, 0x00, 0x1a, 0x13, 0x8a, 0xc4,
	0x03, 0x0f, 0x0a, 0x0d, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x2d, 0x68, 0x79, 0x62, 0x72, 0x69,
	0x64, 0x42, 0xb0, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6f,
	0x70, 0x61, 0x71, 0x75, 0x65, 0x42, 0x0b, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6c, 0x75, 0x64, 0x64, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d,
	0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0xa2,
	0x02, 0x03, 0x54, 0x4f, 0x58, 0xaa, 0x02, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x61,
	0x71, 0x75, 0x65, 0xca, 0x02, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x5c, 0x4f, 0x70, 0x61, 0x71, 0x75,
	0x65, 0xe2, 0x02, 0x17, 0x54, 0x65, 0x73, 0x74, 0x5c, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0c, 0x54, 0x65,
	0x73, 0x74, 0x3a, 0x3a, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x92, 0x03, 0x07, 0xd2, 0x3e, 0x02,
	0x10, 0x02, 0x08, 0x02, 0x62, 0x08, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0xe8,
	0x07,
})

var file_test_opaque_hybrid_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_test_opaque_hybrid_proto_goTypes = []any{
	(*HybridExample)(nil), // 0: test.opaque.HybridExample
	nil,                   // 1: test.opaque.HybridExample.ExtraEntry
	(Status)(0),           // 2: test.opaque.Status
	(*Address)(nil),       // 3: test.opaque.Address
	(*emptypb.Empty)(nil), // 4: google.protobuf.Empty
}
var file_test_opaque_hybrid_proto_depIdxs = []int32{
	1, // 0: test.opaque.HybridExample.extra:type_name -> test.opaque.HybridExample.ExtraEntry
	2, // 1: test.opaque.HybridExample.status:type_name -> test.opaque.Status
	2, // 2: test.opaque.HybridExample.statuses:type_name -> test.opaque.Status
	3, // 3: test.opaque.HybridExample.address:type_name -> test.opaque.Address
	3, // 4: test.opaque.HybridExample.previous_addresses:type_name -> test.opaque.Address
	2, // 5: test.opaque.HybridExample.oneof_status:type_name -> test.opaque.Status
	3, // 6: test.opaque.HybridExample.oneof_address:type_name -> test.opaque.Address
	0, // 7: test.opaque.Hybrid.PutHybridExample:input_type -> test.opaque.HybridExample
	0, // 8: test.opaque.Hybrid.SignalHybrid:input_type -> test.opaque.HybridExample
	0, // 9: test.opaque.Hybrid.PutHybridExample:output_type -> test.opaque.HybridExample
	4, // 10: test.opaque.Hybrid.SignalHybrid:output_type -> google.protobuf.Empty
	9, // [9:11] is the sub-list for method output_type
	7, // [7:9] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_test_opaque_hybrid_proto_init() }
func file_test_opaque_hybrid_proto_init() {
	if File_test_opaque_hybrid_proto != nil {
		return
	}
	file_test_opaque_common_proto_init()
	file_test_opaque_hybrid_proto_msgTypes[0].OneofWrappers = []any{
		(*hybridExample_OneofName)(nil),
		(*hybridExample_OneofScore)(nil),
		(*hybridExample_OneofRatio)(nil),
		(*hybridExample_OneofAge)(nil),
		(*hybridExample_OneofId)(nil),
		(*hybridExample_OneofStatus)(nil),
		(*hybridExample_OneofSize)(nil),
		(*hybridExample_OneofLength)(nil),
		(*hybridExample_OneofConnectionId)(nil),
		(*hybridExample_OneofSessionId)(nil),
		(*hybridExample_OneofFixedSize)(nil),
		(*hybridExample_OneofFixedLength)(nil),
		(*hybridExample_OneofSfixedSize)(nil),
		(*hybridExample_OneofSfixedLength)(nil),
		(*hybridExample_OneofIsActive)(nil),
		(*hybridExample_OneofData)(nil),
		(*hybridExample_OneofAddress)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_test_opaque_hybrid_proto_rawDesc), len(file_test_opaque_hybrid_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_test_opaque_hybrid_proto_goTypes,
		DependencyIndexes: file_test_opaque_hybrid_proto_depIdxs,
		MessageInfos:      file_test_opaque_hybrid_proto_msgTypes,
	}.Build()
	File_test_opaque_hybrid_proto = out.File
	file_test_opaque_hybrid_proto_goTypes = nil
	file_test_opaque_hybrid_proto_depIdxs = nil
}
