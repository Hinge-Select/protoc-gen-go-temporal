// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: temporal/v1/temporal.proto

package temporalv1

import (
	v1 "go.temporal.io/api/enums/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// IDReusePolicy defines how new runs of a workflow with a particular ID may or
// may not be allowed. Note that it is *never* valid to have two actively
// running instances of the same workflow id.
type IDReusePolicy int32

const (
	IDReusePolicy_WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED IDReusePolicy = 0
	// Allow starting a workflow execution using the same workflow id.
	IDReusePolicy_WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE IDReusePolicy = 1
	// Allow starting a workflow execution using the same workflow id, only when the last
	// execution's final state is one of [terminated, cancelled, timed out, failed].
	IDReusePolicy_WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE_FAILED_ONLY IDReusePolicy = 2
	// Do not permit re-use of the workflow id for this workflow. Future start workflow requests
	// could potentially change the policy, allowing re-use of the workflow id.
	IDReusePolicy_WORKFLOW_ID_REUSE_POLICY_REJECT_DUPLICATE IDReusePolicy = 3
	// If a workflow is running using the same workflow ID, terminate it and start a new one.
	// If no running workflow, then the behavior is the same as ALLOW_DUPLICATE
	IDReusePolicy_WORKFLOW_ID_REUSE_POLICY_TERMINATE_IF_RUNNING IDReusePolicy = 4
)

// Enum value maps for IDReusePolicy.
var (
	IDReusePolicy_name = map[int32]string{
		0: "WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED",
		1: "WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE",
		2: "WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE_FAILED_ONLY",
		3: "WORKFLOW_ID_REUSE_POLICY_REJECT_DUPLICATE",
		4: "WORKFLOW_ID_REUSE_POLICY_TERMINATE_IF_RUNNING",
	}
	IDReusePolicy_value = map[string]int32{
		"WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED":                 0,
		"WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE":             1,
		"WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE_FAILED_ONLY": 2,
		"WORKFLOW_ID_REUSE_POLICY_REJECT_DUPLICATE":            3,
		"WORKFLOW_ID_REUSE_POLICY_TERMINATE_IF_RUNNING":        4,
	}
)

func (x IDReusePolicy) Enum() *IDReusePolicy {
	p := new(IDReusePolicy)
	*p = x
	return p
}

func (x IDReusePolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IDReusePolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_v1_temporal_proto_enumTypes[0].Descriptor()
}

func (IDReusePolicy) Type() protoreflect.EnumType {
	return &file_temporal_v1_temporal_proto_enumTypes[0]
}

func (x IDReusePolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IDReusePolicy.Descriptor instead.
func (IDReusePolicy) EnumDescriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{0}
}

// Defines how child workflows will react to their parent completing
type ParentClosePolicy int32

const (
	ParentClosePolicy_PARENT_CLOSE_POLICY_UNSPECIFIED ParentClosePolicy = 0
	// The child workflow will also terminate
	ParentClosePolicy_PARENT_CLOSE_POLICY_TERMINATE ParentClosePolicy = 1
	// The child workflow will do nothing
	ParentClosePolicy_PARENT_CLOSE_POLICY_ABANDON ParentClosePolicy = 2
	// Cancellation will be requested of the child workflow
	ParentClosePolicy_PARENT_CLOSE_POLICY_REQUEST_CANCEL ParentClosePolicy = 3
)

// Enum value maps for ParentClosePolicy.
var (
	ParentClosePolicy_name = map[int32]string{
		0: "PARENT_CLOSE_POLICY_UNSPECIFIED",
		1: "PARENT_CLOSE_POLICY_TERMINATE",
		2: "PARENT_CLOSE_POLICY_ABANDON",
		3: "PARENT_CLOSE_POLICY_REQUEST_CANCEL",
	}
	ParentClosePolicy_value = map[string]int32{
		"PARENT_CLOSE_POLICY_UNSPECIFIED":    0,
		"PARENT_CLOSE_POLICY_TERMINATE":      1,
		"PARENT_CLOSE_POLICY_ABANDON":        2,
		"PARENT_CLOSE_POLICY_REQUEST_CANCEL": 3,
	}
)

func (x ParentClosePolicy) Enum() *ParentClosePolicy {
	p := new(ParentClosePolicy)
	*p = x
	return p
}

func (x ParentClosePolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParentClosePolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_v1_temporal_proto_enumTypes[1].Descriptor()
}

func (ParentClosePolicy) Type() protoreflect.EnumType {
	return &file_temporal_v1_temporal_proto_enumTypes[1]
}

func (x ParentClosePolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParentClosePolicy.Descriptor instead.
func (ParentClosePolicy) EnumDescriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{1}
}

// WaitPolicy used to indicate to the server how long the client wishes to wait for a return
// value from an UpdateWorkflow RPC
type WaitPolicy int32

const (
	WaitPolicy_WAIT_POLICY_UNSPECIFIED WaitPolicy = 0
	WaitPolicy_WAIT_POLICY_ADMITTED    WaitPolicy = 1
	WaitPolicy_WAIT_POLICY_ACCEPTED    WaitPolicy = 2
	WaitPolicy_WAIT_POLICY_COMPLETED   WaitPolicy = 3
)

// Enum value maps for WaitPolicy.
var (
	WaitPolicy_name = map[int32]string{
		0: "WAIT_POLICY_UNSPECIFIED",
		1: "WAIT_POLICY_ADMITTED",
		2: "WAIT_POLICY_ACCEPTED",
		3: "WAIT_POLICY_COMPLETED",
	}
	WaitPolicy_value = map[string]int32{
		"WAIT_POLICY_UNSPECIFIED": 0,
		"WAIT_POLICY_ADMITTED":    1,
		"WAIT_POLICY_ACCEPTED":    2,
		"WAIT_POLICY_COMPLETED":   3,
	}
)

func (x WaitPolicy) Enum() *WaitPolicy {
	p := new(WaitPolicy)
	*p = x
	return p
}

func (x WaitPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WaitPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_v1_temporal_proto_enumTypes[2].Descriptor()
}

func (WaitPolicy) Type() protoreflect.EnumType {
	return &file_temporal_v1_temporal_proto_enumTypes[2]
}

func (x WaitPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WaitPolicy.Descriptor instead.
func (WaitPolicy) EnumDescriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{2}
}

// enumerates all defined patch versions
type Patch_Version int32

const (
	Patch_PV_UNSPECIFIED Patch_Version = 0
	// wraps expression evaluation in local activities within workflow contexts
	// details: https://cludden.github.io/protoc-gen-go-temporal/docs/guides/fix-versions#fix_version_64_expression_evaluation_local_activity
	Patch_PV_64 Patch_Version = 1
)

// Enum value maps for Patch_Version.
var (
	Patch_Version_name = map[int32]string{
		0: "PV_UNSPECIFIED",
		1: "PV_64",
	}
	Patch_Version_value = map[string]int32{
		"PV_UNSPECIFIED": 0,
		"PV_64":          1,
	}
)

func (x Patch_Version) Enum() *Patch_Version {
	p := new(Patch_Version)
	*p = x
	return p
}

func (x Patch_Version) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Patch_Version) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_v1_temporal_proto_enumTypes[3].Descriptor()
}

func (Patch_Version) Type() protoreflect.EnumType {
	return &file_temporal_v1_temporal_proto_enumTypes[3]
}

func (x Patch_Version) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Patch_Version.Descriptor instead.
func (Patch_Version) EnumDescriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{6, 0}
}

// enumerates all supported patch configurations
type Patch_Mode int32

const (
	// both patch and prior code present behind workflow versioning
	Patch_PVM_ENABLED Patch_Mode = 0
	// only patch code present, workflow version marker present
	Patch_PVM_MARKER Patch_Mode = 1
	// only patch code present, workflow version marker removed
	Patch_PVM_REMOVED Patch_Mode = 2
	// only prior code present, no patch code or workflow version marker introduced
	Patch_PVM_DISABLED Patch_Mode = 3
)

// Enum value maps for Patch_Mode.
var (
	Patch_Mode_name = map[int32]string{
		0: "PVM_ENABLED",
		1: "PVM_MARKER",
		2: "PVM_REMOVED",
		3: "PVM_DISABLED",
	}
	Patch_Mode_value = map[string]int32{
		"PVM_ENABLED":  0,
		"PVM_MARKER":   1,
		"PVM_REMOVED":  2,
		"PVM_DISABLED": 3,
	}
)

func (x Patch_Mode) Enum() *Patch_Mode {
	p := new(Patch_Mode)
	*p = x
	return p
}

func (x Patch_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Patch_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_v1_temporal_proto_enumTypes[4].Descriptor()
}

func (Patch_Mode) Type() protoreflect.EnumType {
	return &file_temporal_v1_temporal_proto_enumTypes[4]
}

func (x Patch_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Patch_Mode.Descriptor instead.
func (Patch_Mode) EnumDescriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{6, 1}
}

// ActivityOptions identifies an rpc method as a Temporal activity definition, and describes
// available activity configuration options
type ActivityOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Fully-qualified activity name
	Name string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	// Override default task queue for activity
	TaskQueue string `protobuf:"bytes,1,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	// Total time that a workflow is willing to wait for Activity to complete
	ScheduleToCloseTimeout *durationpb.Duration `protobuf:"bytes,2,opt,name=schedule_to_close_timeout,json=scheduleToCloseTimeout,proto3" json:"schedule_to_close_timeout,omitempty"`
	// Time that the Activity Task can stay in the Task Queue before it is picked up by
	// a Worker
	ScheduleToStartTimeout *durationpb.Duration `protobuf:"bytes,3,opt,name=schedule_to_start_timeout,json=scheduleToStartTimeout,proto3" json:"schedule_to_start_timeout,omitempty"`
	// Maximum time of a single Activity execution attempt
	StartToCloseTimeout *durationpb.Duration `protobuf:"bytes,4,opt,name=start_to_close_timeout,json=startToCloseTimeout,proto3" json:"start_to_close_timeout,omitempty"`
	// Heartbeat interval. Activity must call Activity.RecordHeartbeat(ctx, "my-heartbeat")
	HeartbeatTimeout *durationpb.Duration `protobuf:"bytes,5,opt,name=heartbeat_timeout,json=heartbeatTimeout,proto3" json:"heartbeat_timeout,omitempty"`
	// WaitForCancellation - Whether to wait for canceled activity to be completed
	// (activity can be failed, completed, cancel accepted)
	WaitForCancellation bool `protobuf:"varint,8,opt,name=wait_for_cancellation,json=waitForCancellation,proto3" json:"wait_for_cancellation,omitempty"`
	// Specifies how to retry an Activity if an error occurs
	RetryPolicy   *RetryPolicy `protobuf:"bytes,6,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActivityOptions) Reset() {
	*x = ActivityOptions{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActivityOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivityOptions) ProtoMessage() {}

func (x *ActivityOptions) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivityOptions.ProtoReflect.Descriptor instead.
func (*ActivityOptions) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{0}
}

func (x *ActivityOptions) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ActivityOptions) GetTaskQueue() string {
	if x != nil {
		return x.TaskQueue
	}
	return ""
}

func (x *ActivityOptions) GetScheduleToCloseTimeout() *durationpb.Duration {
	if x != nil {
		return x.ScheduleToCloseTimeout
	}
	return nil
}

func (x *ActivityOptions) GetScheduleToStartTimeout() *durationpb.Duration {
	if x != nil {
		return x.ScheduleToStartTimeout
	}
	return nil
}

func (x *ActivityOptions) GetStartToCloseTimeout() *durationpb.Duration {
	if x != nil {
		return x.StartToCloseTimeout
	}
	return nil
}

func (x *ActivityOptions) GetHeartbeatTimeout() *durationpb.Duration {
	if x != nil {
		return x.HeartbeatTimeout
	}
	return nil
}

func (x *ActivityOptions) GetWaitForCancellation() bool {
	if x != nil {
		return x.WaitForCancellation
	}
	return false
}

func (x *ActivityOptions) GetRetryPolicy() *RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

type CLIOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ignore        bool                   `protobuf:"varint,1,opt,name=ignore,proto3" json:"ignore,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CLIOptions) Reset() {
	*x = CLIOptions{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CLIOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CLIOptions) ProtoMessage() {}

func (x *CLIOptions) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CLIOptions.ProtoReflect.Descriptor instead.
func (*CLIOptions) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{1}
}

func (x *CLIOptions) GetIgnore() bool {
	if x != nil {
		return x.Ignore
	}
	return false
}

type CLICommandOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ignore        bool                   `protobuf:"varint,1,opt,name=ignore,proto3" json:"ignore,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Usage         string                 `protobuf:"bytes,3,opt,name=usage,proto3" json:"usage,omitempty"`
	Aliases       []string               `protobuf:"bytes,4,rep,name=aliases,proto3" json:"aliases,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CLICommandOptions) Reset() {
	*x = CLICommandOptions{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CLICommandOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CLICommandOptions) ProtoMessage() {}

func (x *CLICommandOptions) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CLICommandOptions.ProtoReflect.Descriptor instead.
func (*CLICommandOptions) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{2}
}

func (x *CLICommandOptions) GetIgnore() bool {
	if x != nil {
		return x.Ignore
	}
	return false
}

func (x *CLICommandOptions) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CLICommandOptions) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *CLICommandOptions) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

type CLIFlagOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Usage         string                 `protobuf:"bytes,3,opt,name=usage,proto3" json:"usage,omitempty"`
	Aliases       []string               `protobuf:"bytes,4,rep,name=aliases,proto3" json:"aliases,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CLIFlagOptions) Reset() {
	*x = CLIFlagOptions{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CLIFlagOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CLIFlagOptions) ProtoMessage() {}

func (x *CLIFlagOptions) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CLIFlagOptions.ProtoReflect.Descriptor instead.
func (*CLIFlagOptions) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{3}
}

func (x *CLIFlagOptions) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CLIFlagOptions) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *CLIFlagOptions) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

type CommandOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ignore        bool                   `protobuf:"varint,1,opt,name=ignore,proto3" json:"ignore,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommandOptions) Reset() {
	*x = CommandOptions{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandOptions) ProtoMessage() {}

func (x *CommandOptions) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandOptions.ProtoReflect.Descriptor instead.
func (*CommandOptions) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{4}
}

func (x *CommandOptions) GetIgnore() bool {
	if x != nil {
		return x.Ignore
	}
	return false
}

type FieldOptions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cli           *CLIFlagOptions        `protobuf:"bytes,1,opt,name=cli,proto3" json:"cli,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FieldOptions) Reset() {
	*x = FieldOptions{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldOptions) ProtoMessage() {}

func (x *FieldOptions) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldOptions.ProtoReflect.Descriptor instead.
func (*FieldOptions) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{5}
}

func (x *FieldOptions) GetCli() *CLIFlagOptions {
	if x != nil {
		return x.Cli
	}
	return nil
}

// Patch describes how a nondeterministic fix/feature introduced to generated
// code is implemented. By default, all patches are introduced in PVM_ENABLED
// mode. Once rollout of updated code has been completed and old workflows have
// closed and retention window passed (or certain that replay is no longer a risk),
// the prior code can be removed by switching to PVM_MARKER or removed entirely
// with PVM_REMOVED. Patch code can also be disabled explicitly using PVM_DISABLED.
type Patch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       Patch_Version          `protobuf:"varint,1,opt,name=version,proto3,enum=temporal.v1.Patch_Version" json:"version,omitempty"`
	Mode          Patch_Mode             `protobuf:"varint,2,opt,name=mode,proto3,enum=temporal.v1.Patch_Mode" json:"mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Patch) Reset() {
	*x = Patch{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Patch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Patch) ProtoMessage() {}

func (x *Patch) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Patch.ProtoReflect.Descriptor instead.
func (*Patch) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{6}
}

func (x *Patch) GetVersion() Patch_Version {
	if x != nil {
		return x.Version
	}
	return Patch_PV_UNSPECIFIED
}

func (x *Patch) GetMode() Patch_Mode {
	if x != nil {
		return x.Mode
	}
	return Patch_PVM_ENABLED
}

// QueryOptions identifies an rpc method as a Temporal query definition, and describes
// available query configuration options
type QueryOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// cli command overrides
	Cli *CLICommandOptions `protobuf:"bytes,4,opt,name=cli,proto3" json:"cli,omitempty"`
	// Fully-qualified query name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// XNS can be used to configure default activity options for xns workflow executions
	Xns *XNSActivityOptions `protobuf:"bytes,2,opt,name=xns,proto3" json:"xns,omitempty"`
	// Configure patches, by default, patches are introduced in enabled mode
	Patches       []*Patch `protobuf:"bytes,3,rep,name=patches,proto3" json:"patches,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryOptions) Reset() {
	*x = QueryOptions{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryOptions) ProtoMessage() {}

func (x *QueryOptions) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryOptions.ProtoReflect.Descriptor instead.
func (*QueryOptions) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{7}
}

func (x *QueryOptions) GetCli() *CLICommandOptions {
	if x != nil {
		return x.Cli
	}
	return nil
}

func (x *QueryOptions) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryOptions) GetXns() *XNSActivityOptions {
	if x != nil {
		return x.Xns
	}
	return nil
}

func (x *QueryOptions) GetPatches() []*Patch {
	if x != nil {
		return x.Patches
	}
	return nil
}

// RetryPolicy describes configuration for activity or child workflow retries
type RetryPolicy struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	InitialInterval        *durationpb.Duration   `protobuf:"bytes,1,opt,name=initial_interval,json=initialInterval,proto3" json:"initial_interval,omitempty"`
	BackoffCoefficient     float64                `protobuf:"fixed64,2,opt,name=backoff_coefficient,json=backoffCoefficient,proto3" json:"backoff_coefficient,omitempty"`
	MaxInterval            *durationpb.Duration   `protobuf:"bytes,3,opt,name=max_interval,json=maxInterval,proto3" json:"max_interval,omitempty"`
	MaxAttempts            int32                  `protobuf:"varint,4,opt,name=max_attempts,json=maxAttempts,proto3" json:"max_attempts,omitempty"`
	NonRetryableErrorTypes []string               `protobuf:"bytes,5,rep,name=non_retryable_error_types,json=nonRetryableErrorTypes,proto3" json:"non_retryable_error_types,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *RetryPolicy) Reset() {
	*x = RetryPolicy{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetryPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryPolicy) ProtoMessage() {}

func (x *RetryPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryPolicy.ProtoReflect.Descriptor instead.
func (*RetryPolicy) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{8}
}

func (x *RetryPolicy) GetInitialInterval() *durationpb.Duration {
	if x != nil {
		return x.InitialInterval
	}
	return nil
}

func (x *RetryPolicy) GetBackoffCoefficient() float64 {
	if x != nil {
		return x.BackoffCoefficient
	}
	return 0
}

func (x *RetryPolicy) GetMaxInterval() *durationpb.Duration {
	if x != nil {
		return x.MaxInterval
	}
	return nil
}

func (x *RetryPolicy) GetMaxAttempts() int32 {
	if x != nil {
		return x.MaxAttempts
	}
	return 0
}

func (x *RetryPolicy) GetNonRetryableErrorTypes() []string {
	if x != nil {
		return x.NonRetryableErrorTypes
	}
	return nil
}

// ServiceOptions provides options that can be used to define common configuration
// shared by all methods
type ServiceOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Configure patches, by default, patches are introduced in enabled mode
	Patches []*Patch `protobuf:"bytes,3,rep,name=patches,proto3" json:"patches,omitempty"`
	// Default namespace for child workflows, activities
	//
	// Deprecated: Marked as deprecated in temporal/v1/temporal.proto.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Default task queue for all workflows, activities
	TaskQueue     string `protobuf:"bytes,1,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceOptions) Reset() {
	*x = ServiceOptions{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceOptions) ProtoMessage() {}

func (x *ServiceOptions) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceOptions.ProtoReflect.Descriptor instead.
func (*ServiceOptions) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{9}
}

func (x *ServiceOptions) GetPatches() []*Patch {
	if x != nil {
		return x.Patches
	}
	return nil
}

// Deprecated: Marked as deprecated in temporal/v1/temporal.proto.
func (x *ServiceOptions) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ServiceOptions) GetTaskQueue() string {
	if x != nil {
		return x.TaskQueue
	}
	return ""
}

// SignalOptions identifies an rpc method as a Temporal singal definition, and describes
// available signal configuration options
type SignalOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// cli command overrides
	Cli *CLICommandOptions `protobuf:"bytes,4,opt,name=cli,proto3" json:"cli,omitempty"`
	// Fully-qualified signal name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// XNS can be used to configure default activity options for xns workflow executions
	Xns *XNSActivityOptions `protobuf:"bytes,2,opt,name=xns,proto3" json:"xns,omitempty"`
	// Configure patches, by default, patches are introduced in enabled mode
	Patches       []*Patch `protobuf:"bytes,3,rep,name=patches,proto3" json:"patches,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignalOptions) Reset() {
	*x = SignalOptions{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalOptions) ProtoMessage() {}

func (x *SignalOptions) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalOptions.ProtoReflect.Descriptor instead.
func (*SignalOptions) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{10}
}

func (x *SignalOptions) GetCli() *CLICommandOptions {
	if x != nil {
		return x.Cli
	}
	return nil
}

func (x *SignalOptions) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SignalOptions) GetXns() *XNSActivityOptions {
	if x != nil {
		return x.Xns
	}
	return nil
}

func (x *SignalOptions) GetPatches() []*Patch {
	if x != nil {
		return x.Patches
	}
	return nil
}

// UpdateOptions identifies an rpc method as a Temporal update definition, and describes
// available update configuration options
type UpdateOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// cli command overrides
	Cli *CLICommandOptions `protobuf:"bytes,8,opt,name=cli,proto3" json:"cli,omitempty"`
	// ID expression
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Fully-qualified update name
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Configure patches, by default, patches are introduced in enabled mode
	Patches []*Patch `protobuf:"bytes,6,rep,name=patches,proto3" json:"patches,omitempty"`
	// Include validation hook
	Validate bool `protobuf:"varint,2,opt,name=validate,proto3" json:"validate,omitempty"`
	// Default wait policy if not specified
	WaitForStage WaitPolicy `protobuf:"varint,7,opt,name=wait_for_stage,json=waitForStage,proto3,enum=temporal.v1.WaitPolicy" json:"wait_for_stage,omitempty"`
	// Deprecated: Marked as deprecated in temporal/v1/temporal.proto.
	WaitPolicy WaitPolicy `protobuf:"varint,3,opt,name=wait_policy,json=waitPolicy,proto3,enum=temporal.v1.WaitPolicy" json:"wait_policy,omitempty"`
	// XNS can be used to configure default activity options for xns workflow executions
	Xns           *XNSActivityOptions `protobuf:"bytes,5,opt,name=xns,proto3" json:"xns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateOptions) Reset() {
	*x = UpdateOptions{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOptions) ProtoMessage() {}

func (x *UpdateOptions) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOptions.ProtoReflect.Descriptor instead.
func (*UpdateOptions) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateOptions) GetCli() *CLICommandOptions {
	if x != nil {
		return x.Cli
	}
	return nil
}

func (x *UpdateOptions) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateOptions) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateOptions) GetPatches() []*Patch {
	if x != nil {
		return x.Patches
	}
	return nil
}

func (x *UpdateOptions) GetValidate() bool {
	if x != nil {
		return x.Validate
	}
	return false
}

func (x *UpdateOptions) GetWaitForStage() WaitPolicy {
	if x != nil {
		return x.WaitForStage
	}
	return WaitPolicy_WAIT_POLICY_UNSPECIFIED
}

// Deprecated: Marked as deprecated in temporal/v1/temporal.proto.
func (x *UpdateOptions) GetWaitPolicy() WaitPolicy {
	if x != nil {
		return x.WaitPolicy
	}
	return WaitPolicy_WAIT_POLICY_UNSPECIFIED
}

func (x *UpdateOptions) GetXns() *XNSActivityOptions {
	if x != nil {
		return x.Xns
	}
	return nil
}

// WorkflowOptions identifies an rpc method as a Temporal workflow definition, and describes
// available workflow configuration options
type WorkflowOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// cli command overrides
	Cli *CLICommandOptions `protobuf:"bytes,19,opt,name=cli,proto3" json:"cli,omitempty"`
	// Fully-qualified workflow name
	Name string `protobuf:"bytes,14,opt,name=name,proto3" json:"name,omitempty"`
	// List of additional names to register the workflow under. This can be used to migrate
	// to new naming conventions without breaking workflow history or existing clients.
	Aliases []string `protobuf:"bytes,17,rep,name=aliases,proto3" json:"aliases,omitempty"`
	// Queries supported by this workflow
	Query []*WorkflowOptions_Query `protobuf:"bytes,1,rep,name=query,proto3" json:"query,omitempty"`
	// Signals supported by this workflow
	Signal []*WorkflowOptions_Signal `protobuf:"bytes,2,rep,name=signal,proto3" json:"signal,omitempty"`
	// Updates supported by this workflow
	Update []*WorkflowOptions_Update `protobuf:"bytes,3,rep,name=update,proto3" json:"update,omitempty"`
	// The timeout for duration of workflow execution.
	// It includes retries and continue as new. Use WorkflowRunTimeout to limit execution time
	// of a single workflow run.
	ExecutionTimeout *durationpb.Duration `protobuf:"bytes,4,opt,name=execution_timeout,json=executionTimeout,proto3" json:"execution_timeout,omitempty"`
	// Id expression
	Id string `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	// Whether server allow reuse of workflow ID
	IdReusePolicy IDReusePolicy `protobuf:"varint,6,opt,name=id_reuse_policy,json=idReusePolicy,proto3,enum=temporal.v1.IDReusePolicy" json:"id_reuse_policy,omitempty"`
	// Specifies default namespace for child workflows
	//
	// Deprecated: Marked as deprecated in temporal/v1/temporal.proto.
	Namespace string `protobuf:"bytes,7,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Specifies a default parent close policy for child workflows
	ParentClosePolicy ParentClosePolicy `protobuf:"varint,8,opt,name=parent_close_policy,json=parentClosePolicy,proto3,enum=temporal.v1.ParentClosePolicy" json:"parent_close_policy,omitempty"`
	// Configure patches, by default, patches are introduced in enabled mode
	Patches []*Patch `protobuf:"bytes,18,rep,name=patches,proto3" json:"patches,omitempty"`
	// Specifies how to retry an Workflow if an error occurs
	RetryPolicy *RetryPolicy `protobuf:"bytes,9,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	// The timeout for duration of a single workflow run.
	RunTimeout *durationpb.Duration `protobuf:"bytes,10,opt,name=run_timeout,json=runTimeout,proto3" json:"run_timeout,omitempty"`
	// Bloblang mapping defining default workflow search attributes
	SearchAttributes string `protobuf:"bytes,15,opt,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty"`
	// Override service task queue
	TaskQueue string `protobuf:"bytes,11,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	// The timeout for processing workflow task from the time the worker
	// pulled this task. If a workflow task is lost, it is retried after this timeout.
	// The resolution is seconds.
	TaskTimeout *durationpb.Duration `protobuf:"bytes,12,opt,name=task_timeout,json=taskTimeout,proto3" json:"task_timeout,omitempty"`
	// WaitForCancellation specifies whether to wait for canceled child workflow to be ended
	// (child workflow can be ended as: completed/failed/timedout/terminated/canceled)
	WaitForCancellation bool `protobuf:"varint,13,opt,name=wait_for_cancellation,json=waitForCancellation,proto3" json:"wait_for_cancellation,omitempty"`
	// Default workflow id conflict policy for start workflow with options
	WorkflowIdConflictPolicy v1.WorkflowIdConflictPolicy `protobuf:"varint,20,opt,name=workflow_id_conflict_policy,json=workflowIdConflictPolicy,proto3,enum=temporal.api.enums.v1.WorkflowIdConflictPolicy" json:"workflow_id_conflict_policy,omitempty"`
	// XNS can be used to configure default activity options for xns workflow executions
	Xns           *XNSActivityOptions `protobuf:"bytes,16,opt,name=xns,proto3" json:"xns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowOptions) Reset() {
	*x = WorkflowOptions{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowOptions) ProtoMessage() {}

func (x *WorkflowOptions) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowOptions.ProtoReflect.Descriptor instead.
func (*WorkflowOptions) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{12}
}

func (x *WorkflowOptions) GetCli() *CLICommandOptions {
	if x != nil {
		return x.Cli
	}
	return nil
}

func (x *WorkflowOptions) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkflowOptions) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *WorkflowOptions) GetQuery() []*WorkflowOptions_Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *WorkflowOptions) GetSignal() []*WorkflowOptions_Signal {
	if x != nil {
		return x.Signal
	}
	return nil
}

func (x *WorkflowOptions) GetUpdate() []*WorkflowOptions_Update {
	if x != nil {
		return x.Update
	}
	return nil
}

func (x *WorkflowOptions) GetExecutionTimeout() *durationpb.Duration {
	if x != nil {
		return x.ExecutionTimeout
	}
	return nil
}

func (x *WorkflowOptions) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WorkflowOptions) GetIdReusePolicy() IDReusePolicy {
	if x != nil {
		return x.IdReusePolicy
	}
	return IDReusePolicy_WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED
}

// Deprecated: Marked as deprecated in temporal/v1/temporal.proto.
func (x *WorkflowOptions) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *WorkflowOptions) GetParentClosePolicy() ParentClosePolicy {
	if x != nil {
		return x.ParentClosePolicy
	}
	return ParentClosePolicy_PARENT_CLOSE_POLICY_UNSPECIFIED
}

func (x *WorkflowOptions) GetPatches() []*Patch {
	if x != nil {
		return x.Patches
	}
	return nil
}

func (x *WorkflowOptions) GetRetryPolicy() *RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

func (x *WorkflowOptions) GetRunTimeout() *durationpb.Duration {
	if x != nil {
		return x.RunTimeout
	}
	return nil
}

func (x *WorkflowOptions) GetSearchAttributes() string {
	if x != nil {
		return x.SearchAttributes
	}
	return ""
}

func (x *WorkflowOptions) GetTaskQueue() string {
	if x != nil {
		return x.TaskQueue
	}
	return ""
}

func (x *WorkflowOptions) GetTaskTimeout() *durationpb.Duration {
	if x != nil {
		return x.TaskTimeout
	}
	return nil
}

func (x *WorkflowOptions) GetWaitForCancellation() bool {
	if x != nil {
		return x.WaitForCancellation
	}
	return false
}

func (x *WorkflowOptions) GetWorkflowIdConflictPolicy() v1.WorkflowIdConflictPolicy {
	if x != nil {
		return x.WorkflowIdConflictPolicy
	}
	return v1.WorkflowIdConflictPolicy(0)
}

func (x *WorkflowOptions) GetXns() *XNSActivityOptions {
	if x != nil {
		return x.Xns
	}
	return nil
}

type XNSActivityOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Fully-qualified xns activity name
	Name string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	// Override default task queue for activity
	TaskQueue string `protobuf:"bytes,1,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	// Total time that a workflow is willing to wait for Activity to complete
	ScheduleToCloseTimeout *durationpb.Duration `protobuf:"bytes,2,opt,name=schedule_to_close_timeout,json=scheduleToCloseTimeout,proto3" json:"schedule_to_close_timeout,omitempty"`
	// Time that the Activity Task can stay in the Task Queue before it is picked up by
	// a Worker
	ScheduleToStartTimeout *durationpb.Duration `protobuf:"bytes,3,opt,name=schedule_to_start_timeout,json=scheduleToStartTimeout,proto3" json:"schedule_to_start_timeout,omitempty"`
	// Maximum time of a single Activity execution attempt
	StartToCloseTimeout *durationpb.Duration `protobuf:"bytes,4,opt,name=start_to_close_timeout,json=startToCloseTimeout,proto3" json:"start_to_close_timeout,omitempty"`
	// HeartbeatInterval configures the default heartbeat interval
	HeartbeatInterval *durationpb.Duration `protobuf:"bytes,8,opt,name=heartbeat_interval,json=heartbeatInterval,proto3" json:"heartbeat_interval,omitempty"`
	// Heartbeat timeout. Activity must call Activity.RecordHeartbeat(ctx, "my-heartbeat")
	HeartbeatTimeout *durationpb.Duration `protobuf:"bytes,5,opt,name=heartbeat_timeout,json=heartbeatTimeout,proto3" json:"heartbeat_timeout,omitempty"`
	// Specifies how to retry an Activity if an error occurs
	RetryPolicy *RetryPolicy `protobuf:"bytes,6,opt,name=retry_policy,json=retryPolicy,proto3" json:"retry_policy,omitempty"`
	// Specifies how activity cancellation is propagated for xns activities that support it
	ParentClosePolicy ParentClosePolicy `protobuf:"varint,9,opt,name=parent_close_policy,json=parentClosePolicy,proto3,enum=temporal.v1.ParentClosePolicy" json:"parent_close_policy,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *XNSActivityOptions) Reset() {
	*x = XNSActivityOptions{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *XNSActivityOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XNSActivityOptions) ProtoMessage() {}

func (x *XNSActivityOptions) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XNSActivityOptions.ProtoReflect.Descriptor instead.
func (*XNSActivityOptions) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{13}
}

func (x *XNSActivityOptions) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *XNSActivityOptions) GetTaskQueue() string {
	if x != nil {
		return x.TaskQueue
	}
	return ""
}

func (x *XNSActivityOptions) GetScheduleToCloseTimeout() *durationpb.Duration {
	if x != nil {
		return x.ScheduleToCloseTimeout
	}
	return nil
}

func (x *XNSActivityOptions) GetScheduleToStartTimeout() *durationpb.Duration {
	if x != nil {
		return x.ScheduleToStartTimeout
	}
	return nil
}

func (x *XNSActivityOptions) GetStartToCloseTimeout() *durationpb.Duration {
	if x != nil {
		return x.StartToCloseTimeout
	}
	return nil
}

func (x *XNSActivityOptions) GetHeartbeatInterval() *durationpb.Duration {
	if x != nil {
		return x.HeartbeatInterval
	}
	return nil
}

func (x *XNSActivityOptions) GetHeartbeatTimeout() *durationpb.Duration {
	if x != nil {
		return x.HeartbeatTimeout
	}
	return nil
}

func (x *XNSActivityOptions) GetRetryPolicy() *RetryPolicy {
	if x != nil {
		return x.RetryPolicy
	}
	return nil
}

func (x *XNSActivityOptions) GetParentClosePolicy() ParentClosePolicy {
	if x != nil {
		return x.ParentClosePolicy
	}
	return ParentClosePolicy_PARENT_CLOSE_POLICY_UNSPECIFIED
}

// Query identifies a query supported by the worklow
type WorkflowOptions_Query struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Query name
	Ref string `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	// XNS can be used to configure default activity options for xns workflow executions
	Xns           *XNSActivityOptions `protobuf:"bytes,2,opt,name=xns,proto3" json:"xns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowOptions_Query) Reset() {
	*x = WorkflowOptions_Query{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowOptions_Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowOptions_Query) ProtoMessage() {}

func (x *WorkflowOptions_Query) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowOptions_Query.ProtoReflect.Descriptor instead.
func (*WorkflowOptions_Query) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{12, 0}
}

func (x *WorkflowOptions_Query) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *WorkflowOptions_Query) GetXns() *XNSActivityOptions {
	if x != nil {
		return x.Xns
	}
	return nil
}

// Signal identifies a signal supported by the workflow
type WorkflowOptions_Signal struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Cli   *CLICommandOptions     `protobuf:"bytes,4,opt,name=cli,proto3" json:"cli,omitempty"`
	// Signal name
	Ref string `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	// Include convenience method for signal with start
	Start bool `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	// XNS can be used to configure default activity options for xns workflow executions
	Xns           *XNSActivityOptions `protobuf:"bytes,3,opt,name=xns,proto3" json:"xns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowOptions_Signal) Reset() {
	*x = WorkflowOptions_Signal{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowOptions_Signal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowOptions_Signal) ProtoMessage() {}

func (x *WorkflowOptions_Signal) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowOptions_Signal.ProtoReflect.Descriptor instead.
func (*WorkflowOptions_Signal) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{12, 1}
}

func (x *WorkflowOptions_Signal) GetCli() *CLICommandOptions {
	if x != nil {
		return x.Cli
	}
	return nil
}

func (x *WorkflowOptions_Signal) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *WorkflowOptions_Signal) GetStart() bool {
	if x != nil {
		return x.Start
	}
	return false
}

func (x *WorkflowOptions_Signal) GetXns() *XNSActivityOptions {
	if x != nil {
		return x.Xns
	}
	return nil
}

// Update identifies an update supported by the workflow
type WorkflowOptions_Update struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Cli   *CLICommandOptions     `protobuf:"bytes,4,opt,name=cli,proto3" json:"cli,omitempty"`
	// Update name
	Ref string `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	// Include convenience method for update with start
	Start bool `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	// Default workflow id conflict policy for update with start
	WorkflowIdConflictPolicy v1.WorkflowIdConflictPolicy `protobuf:"varint,5,opt,name=workflow_id_conflict_policy,json=workflowIdConflictPolicy,proto3,enum=temporal.api.enums.v1.WorkflowIdConflictPolicy" json:"workflow_id_conflict_policy,omitempty"`
	// XNS can be used to configure default activity options for xns workflow executions
	Xns           *XNSActivityOptions `protobuf:"bytes,2,opt,name=xns,proto3" json:"xns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkflowOptions_Update) Reset() {
	*x = WorkflowOptions_Update{}
	mi := &file_temporal_v1_temporal_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowOptions_Update) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowOptions_Update) ProtoMessage() {}

func (x *WorkflowOptions_Update) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_v1_temporal_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowOptions_Update.ProtoReflect.Descriptor instead.
func (*WorkflowOptions_Update) Descriptor() ([]byte, []int) {
	return file_temporal_v1_temporal_proto_rawDescGZIP(), []int{12, 2}
}

func (x *WorkflowOptions_Update) GetCli() *CLICommandOptions {
	if x != nil {
		return x.Cli
	}
	return nil
}

func (x *WorkflowOptions_Update) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *WorkflowOptions_Update) GetStart() bool {
	if x != nil {
		return x.Start
	}
	return false
}

func (x *WorkflowOptions_Update) GetWorkflowIdConflictPolicy() v1.WorkflowIdConflictPolicy {
	if x != nil {
		return x.WorkflowIdConflictPolicy
	}
	return v1.WorkflowIdConflictPolicy(0)
}

func (x *WorkflowOptions_Update) GetXns() *XNSActivityOptions {
	if x != nil {
		return x.Xns
	}
	return nil
}

var file_temporal_v1_temporal_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.ServiceOptions)(nil),
		ExtensionType: (*ServiceOptions)(nil),
		Field:         7233,
		Name:          "temporal.v1.service",
		Tag:           "bytes,7233,opt,name=service",
		Filename:      "temporal/v1/temporal.proto",
	},
	{
		ExtendedType:  (*descriptorpb.ServiceOptions)(nil),
		ExtensionType: (*CLIOptions)(nil),
		Field:         7234,
		Name:          "temporal.v1.cli",
		Tag:           "bytes,7234,opt,name=cli",
		Filename:      "temporal/v1/temporal.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*ActivityOptions)(nil),
		Field:         7234,
		Name:          "temporal.v1.activity",
		Tag:           "bytes,7234,opt,name=activity",
		Filename:      "temporal/v1/temporal.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*CommandOptions)(nil),
		Field:         7238,
		Name:          "temporal.v1.command",
		Tag:           "bytes,7238,opt,name=command",
		Filename:      "temporal/v1/temporal.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*QueryOptions)(nil),
		Field:         7235,
		Name:          "temporal.v1.query",
		Tag:           "bytes,7235,opt,name=query",
		Filename:      "temporal/v1/temporal.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*SignalOptions)(nil),
		Field:         7236,
		Name:          "temporal.v1.signal",
		Tag:           "bytes,7236,opt,name=signal",
		Filename:      "temporal/v1/temporal.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*UpdateOptions)(nil),
		Field:         7237,
		Name:          "temporal.v1.update",
		Tag:           "bytes,7237,opt,name=update",
		Filename:      "temporal/v1/temporal.proto",
	},
	{
		ExtendedType:  (*descriptorpb.MethodOptions)(nil),
		ExtensionType: (*WorkflowOptions)(nil),
		Field:         7233,
		Name:          "temporal.v1.workflow",
		Tag:           "bytes,7233,opt,name=workflow",
		Filename:      "temporal/v1/temporal.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*FieldOptions)(nil),
		Field:         7233,
		Name:          "temporal.v1.field",
		Tag:           "bytes,7233,opt,name=field",
		Filename:      "temporal/v1/temporal.proto",
	},
}

// Extension fields to descriptorpb.ServiceOptions.
var (
	// optional temporal.v1.ServiceOptions service = 7233;
	E_Service = &file_temporal_v1_temporal_proto_extTypes[0]
	// optional temporal.v1.CLIOptions cli = 7234;
	E_Cli = &file_temporal_v1_temporal_proto_extTypes[1]
)

// Extension fields to descriptorpb.MethodOptions.
var (
	// optional temporal.v1.ActivityOptions activity = 7234;
	E_Activity = &file_temporal_v1_temporal_proto_extTypes[2]
	// optional temporal.v1.CommandOptions command = 7238;
	//
	// Deprecated: Marked as deprecated in temporal/v1/temporal.proto.
	E_Command = &file_temporal_v1_temporal_proto_extTypes[3]
	// optional temporal.v1.QueryOptions query = 7235;
	E_Query = &file_temporal_v1_temporal_proto_extTypes[4]
	// optional temporal.v1.SignalOptions signal = 7236;
	E_Signal = &file_temporal_v1_temporal_proto_extTypes[5]
	// optional temporal.v1.UpdateOptions update = 7237;
	E_Update = &file_temporal_v1_temporal_proto_extTypes[6]
	// optional temporal.v1.WorkflowOptions workflow = 7233;
	E_Workflow = &file_temporal_v1_temporal_proto_extTypes[7]
)

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional temporal.v1.FieldOptions field = 7233;
	E_Field = &file_temporal_v1_temporal_proto_extTypes[8]
)

var File_temporal_v1_temporal_proto protoreflect.FileDescriptor

var file_temporal_v1_temporal_proto_rawDesc = string([]byte{
	0x0a, 0x1a, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65,
	0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x74, 0x65,
	0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x74, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xf9, 0x03, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x54, 0x0a, 0x19, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x54,
	0x0a, 0x19, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x4e, 0x0a, 0x16, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x6f,
	0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x68, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x32, 0x0a, 0x15,
	0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x77, 0x61, 0x69,
	0x74, 0x46, 0x6f, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3b, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x24, 0x0a,
	0x0a, 0x43, 0x4c, 0x49, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x22, 0x6f, 0x0a, 0x11, 0x43, 0x4c, 0x49, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x65, 0x73, 0x22, 0x54, 0x0a, 0x0e, 0x43, 0x4c, 0x49, 0x46, 0x6c, 0x61, 0x67, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x22, 0x28, 0x0a, 0x0e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x67,
	0x6e, 0x6f, 0x72, 0x65, 0x22, 0x3d, 0x0a, 0x0c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x03, 0x63, 0x6c, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x4c, 0x49, 0x46, 0x6c, 0x61, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x03,
	0x63, 0x6c, 0x69, 0x22, 0xe0, 0x01, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x34, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x22, 0x28, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x50,
	0x56, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x50, 0x56, 0x5f, 0x36, 0x34, 0x10, 0x01, 0x22, 0x4a, 0x0a, 0x04, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x56, 0x4d, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x56, 0x4d, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45,
	0x52, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x56, 0x4d, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x56, 0x4d, 0x5f, 0x44, 0x49, 0x53, 0x41,
	0x42, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x22, 0xb5, 0x01, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x03, 0x63, 0x6c, 0x69, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x4c, 0x49, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x03, 0x63, 0x6c, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a,
	0x03, 0x78, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x4e, 0x53, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x03, 0x78, 0x6e, 0x73,
	0x12, 0x2c, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x22, 0xa0,
	0x02, 0x0a, 0x0b, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x44,
	0x0a, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x13, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x5f,
	0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x41, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x6e, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x6e, 0x6f, 0x6e, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x22, 0x7f, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x12, 0x20, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x03, 0x63, 0x6c, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x4c, 0x49, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x03, 0x63, 0x6c, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x03, 0x78, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x4e, 0x53, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x03, 0x78, 0x6e, 0x73, 0x12, 0x2c, 0x0a,
	0x07, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x07, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x22, 0xdf, 0x02, 0x0a, 0x0d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a,
	0x03, 0x63, 0x6c, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x4c, 0x49, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x03, 0x63, 0x6c, 0x69, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a,
	0x0e, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0c,
	0x77, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0b,
	0x77, 0x61, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x61, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a,
	0x77, 0x61, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x31, 0x0a, 0x03, 0x78, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x4e, 0x53, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x03, 0x78, 0x6e, 0x73, 0x22, 0xa9, 0x0c,
	0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x30, 0x0a, 0x03, 0x63, 0x6c, 0x69, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x4c, 0x49,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x03,
	0x63, 0x6c, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65,
	0x73, 0x12, 0x38, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x06, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65,
	0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f,
	0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x06, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x42, 0x0a,
	0x0f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x75, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x0d, 0x69, 0x64, 0x52, 0x65, 0x75, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x20, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x2c, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x12,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3a,
	0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x72, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x73,
	0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x77, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6e, 0x0a, 0x1b, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e,
	0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x18,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69,
	0x63, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x31, 0x0a, 0x03, 0x78, 0x6e, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x58, 0x4e, 0x53, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x03, 0x78, 0x6e, 0x73, 0x1a, 0x4c, 0x0a, 0x05, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x31, 0x0a, 0x03, 0x78, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x58, 0x4e, 0x53, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x03, 0x78, 0x6e, 0x73, 0x1a, 0x95, 0x01, 0x0a, 0x06, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x03, 0x63, 0x6c, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x4c, 0x49, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x03, 0x63, 0x6c, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x31,
	0x0a, 0x03, 0x78, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65,
	0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x58, 0x4e, 0x53, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x03, 0x78, 0x6e,
	0x73, 0x1a, 0x85, 0x02, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x03,
	0x63, 0x6c, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x4c, 0x49, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x03, 0x63, 0x6c, 0x69, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x66,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x6e, 0x0a, 0x1b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x74, 0x65,
	0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x18, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x31, 0x0a, 0x03, 0x78, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x58, 0x4e, 0x53, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x03, 0x78, 0x6e, 0x73, 0x22, 0xe2, 0x04, 0x0a, 0x12, 0x58, 0x4e,
	0x53, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x12, 0x54, 0x0a, 0x19, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f,
	0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x16, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x54, 0x0a, 0x19, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x4e, 0x0a, 0x16, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x6f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x48, 0x0a, 0x12, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x46, 0x0a, 0x11, 0x68, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x10, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x4e,
	0x0a, 0x13, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x74, 0x65,
	0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x11, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2a, 0x83,
	0x02, 0x0a, 0x0d, 0x49, 0x44, 0x52, 0x65, 0x75, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x28, 0x0a, 0x24, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x44, 0x5f,
	0x52, 0x45, 0x55, 0x53, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x57, 0x4f,
	0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x55, 0x53, 0x45, 0x5f,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x44, 0x55, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x38, 0x0a, 0x34, 0x57, 0x4f, 0x52, 0x4b,
	0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x55, 0x53, 0x45, 0x5f, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59,
	0x10, 0x02, 0x12, 0x2d, 0x0a, 0x29, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49,
	0x44, 0x5f, 0x52, 0x45, 0x55, 0x53, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x52,
	0x45, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10,
	0x03, 0x12, 0x31, 0x0a, 0x2d, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x44,
	0x5f, 0x52, 0x45, 0x55, 0x53, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x54, 0x45,
	0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x46, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x04, 0x2a, 0xa4, 0x01, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x41,
	0x52, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x21, 0x0a, 0x1d, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45,
	0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x4f,
	0x53, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41, 0x42, 0x41, 0x4e, 0x44, 0x4f,
	0x4e, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c,
	0x4f, 0x53, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x03, 0x2a, 0x78, 0x0a, 0x0a, 0x57,
	0x61, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1b, 0x0a, 0x17, 0x57, 0x41, 0x49,
	0x54, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f,
	0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x57, 0x41,
	0x49, 0x54, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45,
	0x54, 0x45, 0x44, 0x10, 0x03, 0x3a, 0x5a, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0xc1, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f,
	0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x3a, 0x4e, 0x0a, 0x03, 0x63, 0x6c, 0x69, 0x12, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xc2, 0x38, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x4c, 0x49, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x03, 0x63, 0x6c, 0x69, 0x88, 0x01,
	0x01, 0x3a, 0x5c, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xc2, 0x38,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x3a,
	0x5d, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xc6, 0x38, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x3a, 0x53,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xc3, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x88, 0x01, 0x01, 0x3a, 0x56, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xc4, 0x38,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x3a, 0x56, 0x0a, 0x06, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xc5, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74,
	0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x3a, 0x5c, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0xc1, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x88, 0x01,
	0x01, 0x3a, 0x52, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xc1, 0x38, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x88, 0x01, 0x01, 0x42, 0xb3, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x65,
	0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x42, 0x0d, 0x54, 0x65, 0x6d, 0x70, 0x6f,
	0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x75, 0x64, 0x64, 0x65, 0x6e, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x2d, 0x74, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x6c, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x76, 0x31,
	0xa2, 0x02, 0x03, 0x54, 0x58, 0x58, 0xaa, 0x02, 0x0b, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61,
	0x6c, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0b, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x5c,
	0x56, 0x31, 0xe2, 0x02, 0x17, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x5c, 0x56, 0x31,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0c, 0x54,
	0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_temporal_v1_temporal_proto_rawDescOnce sync.Once
	file_temporal_v1_temporal_proto_rawDescData []byte
)

func file_temporal_v1_temporal_proto_rawDescGZIP() []byte {
	file_temporal_v1_temporal_proto_rawDescOnce.Do(func() {
		file_temporal_v1_temporal_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_temporal_v1_temporal_proto_rawDesc), len(file_temporal_v1_temporal_proto_rawDesc)))
	})
	return file_temporal_v1_temporal_proto_rawDescData
}

var file_temporal_v1_temporal_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_temporal_v1_temporal_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_temporal_v1_temporal_proto_goTypes = []any{
	(IDReusePolicy)(0),                  // 0: temporal.v1.IDReusePolicy
	(ParentClosePolicy)(0),              // 1: temporal.v1.ParentClosePolicy
	(WaitPolicy)(0),                     // 2: temporal.v1.WaitPolicy
	(Patch_Version)(0),                  // 3: temporal.v1.Patch.Version
	(Patch_Mode)(0),                     // 4: temporal.v1.Patch.Mode
	(*ActivityOptions)(nil),             // 5: temporal.v1.ActivityOptions
	(*CLIOptions)(nil),                  // 6: temporal.v1.CLIOptions
	(*CLICommandOptions)(nil),           // 7: temporal.v1.CLICommandOptions
	(*CLIFlagOptions)(nil),              // 8: temporal.v1.CLIFlagOptions
	(*CommandOptions)(nil),              // 9: temporal.v1.CommandOptions
	(*FieldOptions)(nil),                // 10: temporal.v1.FieldOptions
	(*Patch)(nil),                       // 11: temporal.v1.Patch
	(*QueryOptions)(nil),                // 12: temporal.v1.QueryOptions
	(*RetryPolicy)(nil),                 // 13: temporal.v1.RetryPolicy
	(*ServiceOptions)(nil),              // 14: temporal.v1.ServiceOptions
	(*SignalOptions)(nil),               // 15: temporal.v1.SignalOptions
	(*UpdateOptions)(nil),               // 16: temporal.v1.UpdateOptions
	(*WorkflowOptions)(nil),             // 17: temporal.v1.WorkflowOptions
	(*XNSActivityOptions)(nil),          // 18: temporal.v1.XNSActivityOptions
	(*WorkflowOptions_Query)(nil),       // 19: temporal.v1.WorkflowOptions.Query
	(*WorkflowOptions_Signal)(nil),      // 20: temporal.v1.WorkflowOptions.Signal
	(*WorkflowOptions_Update)(nil),      // 21: temporal.v1.WorkflowOptions.Update
	(*durationpb.Duration)(nil),         // 22: google.protobuf.Duration
	(v1.WorkflowIdConflictPolicy)(0),    // 23: temporal.api.enums.v1.WorkflowIdConflictPolicy
	(*descriptorpb.ServiceOptions)(nil), // 24: google.protobuf.ServiceOptions
	(*descriptorpb.MethodOptions)(nil),  // 25: google.protobuf.MethodOptions
	(*descriptorpb.FieldOptions)(nil),   // 26: google.protobuf.FieldOptions
}
var file_temporal_v1_temporal_proto_depIdxs = []int32{
	22, // 0: temporal.v1.ActivityOptions.schedule_to_close_timeout:type_name -> google.protobuf.Duration
	22, // 1: temporal.v1.ActivityOptions.schedule_to_start_timeout:type_name -> google.protobuf.Duration
	22, // 2: temporal.v1.ActivityOptions.start_to_close_timeout:type_name -> google.protobuf.Duration
	22, // 3: temporal.v1.ActivityOptions.heartbeat_timeout:type_name -> google.protobuf.Duration
	13, // 4: temporal.v1.ActivityOptions.retry_policy:type_name -> temporal.v1.RetryPolicy
	8,  // 5: temporal.v1.FieldOptions.cli:type_name -> temporal.v1.CLIFlagOptions
	3,  // 6: temporal.v1.Patch.version:type_name -> temporal.v1.Patch.Version
	4,  // 7: temporal.v1.Patch.mode:type_name -> temporal.v1.Patch.Mode
	7,  // 8: temporal.v1.QueryOptions.cli:type_name -> temporal.v1.CLICommandOptions
	18, // 9: temporal.v1.QueryOptions.xns:type_name -> temporal.v1.XNSActivityOptions
	11, // 10: temporal.v1.QueryOptions.patches:type_name -> temporal.v1.Patch
	22, // 11: temporal.v1.RetryPolicy.initial_interval:type_name -> google.protobuf.Duration
	22, // 12: temporal.v1.RetryPolicy.max_interval:type_name -> google.protobuf.Duration
	11, // 13: temporal.v1.ServiceOptions.patches:type_name -> temporal.v1.Patch
	7,  // 14: temporal.v1.SignalOptions.cli:type_name -> temporal.v1.CLICommandOptions
	18, // 15: temporal.v1.SignalOptions.xns:type_name -> temporal.v1.XNSActivityOptions
	11, // 16: temporal.v1.SignalOptions.patches:type_name -> temporal.v1.Patch
	7,  // 17: temporal.v1.UpdateOptions.cli:type_name -> temporal.v1.CLICommandOptions
	11, // 18: temporal.v1.UpdateOptions.patches:type_name -> temporal.v1.Patch
	2,  // 19: temporal.v1.UpdateOptions.wait_for_stage:type_name -> temporal.v1.WaitPolicy
	2,  // 20: temporal.v1.UpdateOptions.wait_policy:type_name -> temporal.v1.WaitPolicy
	18, // 21: temporal.v1.UpdateOptions.xns:type_name -> temporal.v1.XNSActivityOptions
	7,  // 22: temporal.v1.WorkflowOptions.cli:type_name -> temporal.v1.CLICommandOptions
	19, // 23: temporal.v1.WorkflowOptions.query:type_name -> temporal.v1.WorkflowOptions.Query
	20, // 24: temporal.v1.WorkflowOptions.signal:type_name -> temporal.v1.WorkflowOptions.Signal
	21, // 25: temporal.v1.WorkflowOptions.update:type_name -> temporal.v1.WorkflowOptions.Update
	22, // 26: temporal.v1.WorkflowOptions.execution_timeout:type_name -> google.protobuf.Duration
	0,  // 27: temporal.v1.WorkflowOptions.id_reuse_policy:type_name -> temporal.v1.IDReusePolicy
	1,  // 28: temporal.v1.WorkflowOptions.parent_close_policy:type_name -> temporal.v1.ParentClosePolicy
	11, // 29: temporal.v1.WorkflowOptions.patches:type_name -> temporal.v1.Patch
	13, // 30: temporal.v1.WorkflowOptions.retry_policy:type_name -> temporal.v1.RetryPolicy
	22, // 31: temporal.v1.WorkflowOptions.run_timeout:type_name -> google.protobuf.Duration
	22, // 32: temporal.v1.WorkflowOptions.task_timeout:type_name -> google.protobuf.Duration
	23, // 33: temporal.v1.WorkflowOptions.workflow_id_conflict_policy:type_name -> temporal.api.enums.v1.WorkflowIdConflictPolicy
	18, // 34: temporal.v1.WorkflowOptions.xns:type_name -> temporal.v1.XNSActivityOptions
	22, // 35: temporal.v1.XNSActivityOptions.schedule_to_close_timeout:type_name -> google.protobuf.Duration
	22, // 36: temporal.v1.XNSActivityOptions.schedule_to_start_timeout:type_name -> google.protobuf.Duration
	22, // 37: temporal.v1.XNSActivityOptions.start_to_close_timeout:type_name -> google.protobuf.Duration
	22, // 38: temporal.v1.XNSActivityOptions.heartbeat_interval:type_name -> google.protobuf.Duration
	22, // 39: temporal.v1.XNSActivityOptions.heartbeat_timeout:type_name -> google.protobuf.Duration
	13, // 40: temporal.v1.XNSActivityOptions.retry_policy:type_name -> temporal.v1.RetryPolicy
	1,  // 41: temporal.v1.XNSActivityOptions.parent_close_policy:type_name -> temporal.v1.ParentClosePolicy
	18, // 42: temporal.v1.WorkflowOptions.Query.xns:type_name -> temporal.v1.XNSActivityOptions
	7,  // 43: temporal.v1.WorkflowOptions.Signal.cli:type_name -> temporal.v1.CLICommandOptions
	18, // 44: temporal.v1.WorkflowOptions.Signal.xns:type_name -> temporal.v1.XNSActivityOptions
	7,  // 45: temporal.v1.WorkflowOptions.Update.cli:type_name -> temporal.v1.CLICommandOptions
	23, // 46: temporal.v1.WorkflowOptions.Update.workflow_id_conflict_policy:type_name -> temporal.api.enums.v1.WorkflowIdConflictPolicy
	18, // 47: temporal.v1.WorkflowOptions.Update.xns:type_name -> temporal.v1.XNSActivityOptions
	24, // 48: temporal.v1.service:extendee -> google.protobuf.ServiceOptions
	24, // 49: temporal.v1.cli:extendee -> google.protobuf.ServiceOptions
	25, // 50: temporal.v1.activity:extendee -> google.protobuf.MethodOptions
	25, // 51: temporal.v1.command:extendee -> google.protobuf.MethodOptions
	25, // 52: temporal.v1.query:extendee -> google.protobuf.MethodOptions
	25, // 53: temporal.v1.signal:extendee -> google.protobuf.MethodOptions
	25, // 54: temporal.v1.update:extendee -> google.protobuf.MethodOptions
	25, // 55: temporal.v1.workflow:extendee -> google.protobuf.MethodOptions
	26, // 56: temporal.v1.field:extendee -> google.protobuf.FieldOptions
	14, // 57: temporal.v1.service:type_name -> temporal.v1.ServiceOptions
	6,  // 58: temporal.v1.cli:type_name -> temporal.v1.CLIOptions
	5,  // 59: temporal.v1.activity:type_name -> temporal.v1.ActivityOptions
	9,  // 60: temporal.v1.command:type_name -> temporal.v1.CommandOptions
	12, // 61: temporal.v1.query:type_name -> temporal.v1.QueryOptions
	15, // 62: temporal.v1.signal:type_name -> temporal.v1.SignalOptions
	16, // 63: temporal.v1.update:type_name -> temporal.v1.UpdateOptions
	17, // 64: temporal.v1.workflow:type_name -> temporal.v1.WorkflowOptions
	10, // 65: temporal.v1.field:type_name -> temporal.v1.FieldOptions
	66, // [66:66] is the sub-list for method output_type
	66, // [66:66] is the sub-list for method input_type
	57, // [57:66] is the sub-list for extension type_name
	48, // [48:57] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_temporal_v1_temporal_proto_init() }
func file_temporal_v1_temporal_proto_init() {
	if File_temporal_v1_temporal_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_temporal_v1_temporal_proto_rawDesc), len(file_temporal_v1_temporal_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   17,
			NumExtensions: 9,
			NumServices:   0,
		},
		GoTypes:           file_temporal_v1_temporal_proto_goTypes,
		DependencyIndexes: file_temporal_v1_temporal_proto_depIdxs,
		EnumInfos:         file_temporal_v1_temporal_proto_enumTypes,
		MessageInfos:      file_temporal_v1_temporal_proto_msgTypes,
		ExtensionInfos:    file_temporal_v1_temporal_proto_extTypes,
	}.Build()
	File_temporal_v1_temporal_proto = out.File
	file_temporal_v1_temporal_proto_goTypes = nil
	file_temporal_v1_temporal_proto_depIdxs = nil
}
