syntax = "proto3";

package temporal.v1;

import "google/protobuf/descriptor.proto";
import "google/protobuf/duration.proto";

option go_package = "github.com/cludden/protoc-gen-go-temporal/gen/temporal/v1";

extend google.protobuf.ServiceOptions {
  optional ServiceOptions service = 7233;
}

extend google.protobuf.MethodOptions {
  optional WorkflowOptions workflow = 7233;
  optional ActivityOptions activity = 7234;
  optional QueryOptions query = 7235;
  optional SignalOptions signal = 7236;
}

message ServiceOptions {
  // Default task queue for all workflows, activities
  string task_queue = 1;
}

message WorkflowOptions {
  // Queries supported by this workflow
  repeated Query query = 1;
  // Signals supported by this workflow
  repeated Signal signal = 2;
  // Default configuration for StartWorklowOptions, ExecuteChildWorkflowOptions
  StartOptions default_options = 6;

  message Query {
    // Query name
    string ref = 1;
  }

  message Signal {
    // Signal name
    string ref = 1;

    // Include convenience method for signal with start
    bool start = 2;
  }

  message StartOptions {
    // Override service task queeu
    string task_queue = 1;

    // Request message field to use as workflow id
    string id_field = 2;

    // Prefix to prepend to workflow ids
    string id_prefix = 3;

    // Whether server allow reuse of workflow ID
    IDReusePolicy id_reuse_policy = 4;

    // The timeout for duration of workflow execution.
    // It includes retries and continue as new. Use WorkflowRunTimeout to limit execution time
    // of a single workflow run.
    google.protobuf.Duration execution_timeout = 5;

    // The timeout for duration of a single workflow run.
    google.protobuf.Duration run_timeout = 6;

    // The timeout for processing workflow task from the time the worker
    // pulled this task. If a workflow task is lost, it is retried after this timeout.
    // The resolution is seconds.
    google.protobuf.Duration task_timeout = 7;
  }
}

enum IDReusePolicy {
  UNSPECIFIED = 0;
  ALLOW_DUPLICATE = 1;
  ALLOW_DUPLICATE_FAILED_ONLY = 2;
  REJECT_DUPLICATE = 3;
  TERMINATE_IF_RUNNING = 4;
}

message ActivityOptions {
  // Default configuration for ActivityOptions
  StartOptions default_options = 1;

  message StartOptions {
    // Override default task queue for activity
    string task_queue = 1;

    // Total time that a workflow is willing to wait for Activity to complete
    google.protobuf.Duration schedule_to_close_timeout = 2;

    // Time that the Activity Task can stay in the Task Queue before it is picked up by
    // a Worker
    google.protobuf.Duration schedule_to_start_timeout = 3;

    // Maximum time of a single Activity execution attempt
    google.protobuf.Duration start_to_close_timeout = 4;

    // Heartbeat interval. Activity must call Activity.RecordHeartbeat(ctx, "my-heartbeat")
    google.protobuf.Duration heartbeat_timeout = 5;

    // Specifies how to retry an Activity if an error occurs
    RetryPolicy retry_policy = 6;

    message RetryPolicy {
      google.protobuf.Duration initial_interval = 1;
      double backoff_coefficient = 2;
      google.protobuf.Duration max_interval = 3;
      int32 max_attempts = 4;
      repeated string non_retryable_error_types = 5;
    }
  }
}

message QueryOptions {}

message SignalOptions {}
