syntax="proto3";

// buf:lint:ignore PACKAGE_DIRECTORY_MATCH
package mycompany.mutex;

import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "temporal/v1/temporal.proto";

service Mutex {
  option (temporal.v1.service) = {
    task_queue: "mutex-v1"
  };

  // ##########################################################################
  // Workflows
  // ##########################################################################

  // Mutex provides a mutex over a shared resource
  rpc Mutex(MutexRequest) returns (google.protobuf.Empty) {
    option (temporal.v1.workflow) = {
      id: 'mutex/${!resource}'
      id_reuse_policy: WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE
      execution_timeout: { seconds: 3600 }
      signal: { ref: 'AcquireLease', start: true }
      signal: { ref: 'RenewLease' }
      signal: { ref: 'RevokeLease' }
    };
    option (temporal.v1.activity) = {};
  }

  // SampleWorkflowWithMutex provides an example of a running workflow that uses
  // a Mutex workflow to prevent concurrent access to a shared resource
  rpc SampleWorkflowWithMutex(SampleWorkflowWithMutexRequest) returns (SampleWorkflowWithMutexResponse) {
    option (temporal.v1.workflow) = {
      id: 'sample-workflow-with-mutex/${!resource}/${!uuid_v4()}'
      id_reuse_policy: WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE_FAILED_ONLY
      execution_timeout: { seconds: 3600 }
      signal: { ref: 'LeaseAcquired' }
    };
  }

  // ##########################################################################
  // Signals
  // ##########################################################################

  // AcquireLease enqueues a lease on the given resource
  rpc AcquireLease(AcquireLeaseRequest) returns (google.protobuf.Empty) {
    option (temporal.v1.signal) = {};
  }

  // LeaseAcquired notifies the calling workflow that a lease has been required
  rpc LeaseAcquired(LeaseAcquiredRequest) returns (google.protobuf.Empty) {
    option (temporal.v1.signal) = {};
  }

  // RenewLease extends the validity of an existing lease
  rpc RenewLease(RenewLeaseRequest) returns (google.protobuf.Empty) {
    option (temporal.v1.signal) = {};
  }

  // RevokeLease revokes an existing lease
  rpc RevokeLease(RevokeLeaseRequest) returns (google.protobuf.Empty) {
    option (temporal.v1.signal) = {};
  }
}

// ############################################################################
// Workflow Messages
// ############################################################################

// MutexRequest describes the input to a Mutex workflow/activity
message MutexRequest {
  string resource = 1;
}

// SampleWorkflowWithMutexRequest describes the input to a SampleWorkflowWithMutex workflow
message SampleWorkflowWithMutexRequest {
  string resource = 1;
  string dest = 2;
  double amount = 3;
}

// SampleWorkflowWithMutexResponse describes the output from a SampleWorkflowWithMutex workflow
message SampleWorkflowWithMutexResponse {
  string result = 1;
}

// ############################################################################
// Signal Messages
// ############################################################################

// AcquireLeaseRequest describes the input to a AcquireLease signal
message AcquireLeaseRequest {
  string workflow_id = 1;
  google.protobuf.Duration timeout = 2;
}

// LeaseAcquiredRequest describes the input to a LeaseAcquired signal
message LeaseAcquiredRequest {
  string workflow_id = 1;
  string run_id = 2;
  string lease_id = 3;
}

// RenewLeaseRequest describes the input to a RenewLease signal
message RenewLeaseRequest {
  string lease_id = 1;
  google.protobuf.Duration timeout = 2;
}

// RevokeLeaseRequest describes the input to a RevokeLease signal
message RevokeLeaseRequest {
  string lease_id = 1;
}
